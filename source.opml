<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Thu, 21 Sep 2023 14:02:02 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: daveappserver</title>
		<dateCreated>Thu, 26 Nov 2020 18:41:01 GMT</dateCreated>
		<dateModified>Thu, 21 Sep 2023 14:02:02 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 7, 8, 10</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>209</windowTop>
		<windowLeft>582</windowLeft>
		<windowBottom>1309</windowBottom>
		<windowRight>2025</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/daveappserver/">
			<outline text="worknotes.md" created="Mon, 27 Jun 2022 15:00:43 GMT">
				<outline text="#### 9/20/23; 10:33:40 AM by DW" created="Wed, 20 Sep 2023 14:33:40 GMT">
					<outline text="Two new optional callbacks, getStaticFile and publishStaticFile." created="Wed, 20 Sep 2023 14:33:40 GMT"/>
					<outline text="FeedLand uses this to store static files in a database table instead of S3." created="Wed, 20 Sep 2023 14:34:56 GMT"/>
					</outline>
				<outline text="#### 9/16/23; 10:46:52 AM by DW" created="Sat, 16 Sep 2023 14:46:52 GMT">
					<outline text="Reorganized returnServerHomePage so we read the template text after calling the callbacks. They can change the url of the home page source. This was needed when we added newsproduct rendering to the FeedLand server." created="Sat, 16 Sep 2023 14:44:07 GMT"/>
					</outline>
				<outline text="#### 9/11/23; 10:34:58 AM by DW" created="Mon, 11 Sep 2023 14:34:56 GMT">
					<outline text="How to set up for WordPress" created="Mon, 11 Sep 2023 14:34:11 GMT">
						<outline text="1. First set up a new app &lt;a href=&quot;https://developer.wordpress.com/apps/new/&quot;&gt;here&lt;/a&gt;. " created="Mon, 11 Sep 2023 14:37:31 GMT"/>
						<outline text="2. There's a new section of config.json called wordpress. In it are these values:" created="Mon, 11 Sep 2023 14:34:17 GMT">
							<outline text="&lt;%includeExample (&quot;wordpressInConfig&quot;)%&gt;"/>
							<outline text="&quot;wordpress&quot;: {" isComment="true">
								<outline text="&quot;clientId&quot;: 123456789,"/>
								<outline text="&quot;clientSecret&quot;: &quot;xxx&quot;,"/>
								<outline text="&quot;urlRedirect&quot;: &quot;https://myserver.com/callbackFromWordpress&quot;,"/>
								<outline text="&quot;scope&quot;: &quot;global&quot;"/>
								<outline text=" }"/>
								</outline>
							</outline>
						<outline text="3. Include this in the &amp;lt;head&gt; section of your home page HTML" created="Mon, 11 Sep 2023 15:46:40 GMT">
							<outline text="&amp;lt;script src=&quot;//s3.amazonaws.com/scripting.com/code/wpidentity/client/api.js&quot;&gt;&amp;lt;/script&gt;"/>
							</outline>
						</outline>
					</outline>
				<outline text="#### 9/10/23; 4:27:32 PM by DW -- v0.7.0" created="Sun, 10 Sep 2023 20:27:31 GMT">
					<outline text="WordPress functionality. An app running on daveappserver will be able to log the user on to WordPress, and perform basic operations like creating, updating and deleting posts, getting a list of all their sites. Using the wpidentity package. " created="Sun, 10 Sep 2023 20:27:59 GMT"/>
					<outline text="There are two points of integration, at startup and when handling an http request. " created="Sun, 10 Sep 2023 20:37:54 GMT"/>
					</outline>
				<outline text="#### 8/15/23; 6:54:54 PM by DW" created="Tue, 15 Aug 2023 22:54:53 GMT">
					<outline text="New config setting, flTraceOnError. Defaults false. If true, when davehttp handles a request, it gives you a stack trace that seems pretty useless and it hides where the actual error is happening. You can turn it back on if you feel it is useful. " created="Tue, 15 Aug 2023 22:54:54 GMT"/>
					</outline>
				<outline text="#### 8/14/23; 11:39:18 AM by DW" created="Mon, 14 Aug 2023 15:39:17 GMT">
					<outline text="We need the option of storing pending confirmations in a database, not in memory. " created="Mon, 14 Aug 2023 15:39:18 GMT"/>
					<outline text="new config setting: flUseDatabaseForConfirmations, default false">
						<outline text="config.database must also be defined, but we don't check."/>
						</outline>
					</outline>
				<outline text="#### 7/27/23; 2:27:42 PM by DW" created="Thu, 27 Jul 2023 18:27:39 GMT">
					<outline text="dns.reverse can crash, so do the call in a try statement." created="Thu, 27 Jul 2023 18:27:47 GMT"/>
					</outline>
				<outline text="#### 7/26/23; 3:15:15 PM by DW" created="Wed, 26 Jul 2023 19:15:14 GMT">
					<outline text="There was a stray bit of code that's first running today but was written on May 8 this year (that's the creation date on the outline element). " created="Wed, 26 Jul 2023 19:15:15 GMT"/>
					<outline text="Obviously a direction I thought of going in but didn't." created="Wed, 26 Jul 2023 19:15:52 GMT"/>
					<outline text="It made it into the published package and into the NPM version. " created="Wed, 26 Jul 2023 19:16:56 GMT"/>
					<outline text="getPagetableForHomePage (function (err, pagetable) { " created="Mon, 08 May 2023 13:13:48 GMT">
						<outline text="});" created="Mon, 08 May 2023 13:13:59 GMT"/>
						</outline>
					</outline>
				<outline text="#### 3/17/23; 12:27:58 PM by DW" created="Fri, 17 Mar 2023 16:27:57 GMT">
					<outline text="Only alpha, numeric and underscore characters allowed in user names." created="Fri, 17 Mar 2023 16:27:59 GMT"/>
					</outline>
				<outline text="#### 3/8/23; 12:13:06 PM by DW" created="Wed, 08 Mar 2023 17:12:55 GMT">
					<outline text="email addresses become unicase." created="Wed, 08 Mar 2023 17:13:10 GMT">
						<outline text="we do this by converting the email address as it enters the system from the client. " created="Wed, 08 Mar 2023 17:16:01 GMT">
							<outline text="sendConfirmingEmail" created="Wed, 08 Mar 2023 17:16:20 GMT"/>
							<outline text="callWithScreenname"/>
							</outline>
						</outline>
					</outline>
				<outline text="#### 3/3/23; 10:49:28 AM by DW" created="Fri, 03 Mar 2023 15:49:28 GMT">
					<outline text="I want to be able to send a confirming email from Electric Drummer and have it return with the emailMemory record to a localhost address. " created="Fri, 03 Mar 2023 15:49:29 GMT"/>
					<outline text="This means that the sendConfirmingEmail call must have a new parameter, urlredirect which, if specified, is where we redirect to on confirmation." created="Fri, 03 Mar 2023 15:50:01 GMT"/>
					</outline>
				<outline text="#### 2/8/23; 10:03:25 AM by DW" created="Wed, 08 Feb 2023 15:03:24 GMT">
					<outline text="New config.json setting -- flSecureWebsocket. If true we initiate connections with wss:// otherwise ws://" created="Wed, 08 Feb 2023 15:03:25 GMT"/>
					</outline>
				<outline text="#### 2/8/23; 8:57:32 AM by DW" created="Wed, 08 Feb 2023 13:57:31 GMT">
					<outline text="At startup we look for config.js in the same folder as the app, if it's present we require it, and use the result in place of config.json." created="Wed, 08 Feb 2023 13:57:32 GMT"/>
					<outline text="This approach is needed in certain hosting situations including WordPress VIP. " created="Wed, 08 Feb 2023 13:58:14 GMT"/>
					</outline>
				<outline text="#### 1/30/23; 12:38:16 PM by DW" created="Mon, 30 Jan 2023 17:38:15 GMT">
					<outline text="If config.urlServerForClient is set, don't set it to the default. " created="Mon, 30 Jan 2023 17:38:17 GMT"/>
					<outline text="Same with config.urlWebsocketServerForClient." created="Mon, 30 Jan 2023 17:38:39 GMT"/>
					<outline text="Made sure that config.urlServerForClient and urlWebsocketServerForClient were undefined if not specified in config.json, so we would set the defaults when needed." created="Mon, 30 Jan 2023 17:44:37 GMT"/>
					</outline>
				<outline text="#### 1/23/23; 3:35:25 PM by DW" created="Mon, 23 Jan 2023 20:35:02 GMT">
					<outline text="Support SMTP mail sending in addition to SES." created="Mon, 23 Jan 2023 20:35:27 GMT"/>
					<outline text="New values in config.json to support this:" created="Mon, 23 Jan 2023 20:54:54 GMT">
						<outline text="&quot;smtpHost&quot;: &quot;smtp.mailhost.com&quot;,"/>
						<outline text="&quot;smtpPort&quot;: 587,"/>
						<outline text="&quot;smtpUsername&quot;: &quot;bullman&quot;,"/>
						<outline text="&quot;smtpPassword&quot;: &quot;getoutahere&quot;,"/>
						</outline>
					</outline>
				<outline text="#### 12/11/22 by DW -- v0.6.0" isComment="true" created="Sun, 11 Dec 2022 18:11:15 GMT">
					<outline text="Added requestWithRedirect, exported. Seemed like a good place to put it. " created="Sun, 11 Dec 2022 18:11:33 GMT"/>
					</outline>
				<outline text="#### 9/16/22 by DW -- 0.5.57" created="Fri, 16 Sep 2022 13:15:30 GMT">
					<outline text="Changed /useriswhitelisted call so that it reads config.json itself, so the system doesn't have to be rebooted to make a change to the whitelist." created="Fri, 16 Sep 2022 13:15:30 GMT"/>
					</outline>
				<outline text="#### 8/14/22 by DW -- 0.5.56" created="Tue, 13 Sep 2022 17:43:54 GMT">
					<outline text="Exporting getFilePath so FeedLand server can find the user's prefs.json file. " created="Tue, 13 Sep 2022 17:43:55 GMT"/>
					</outline>
				<outline text="#### 8/14/22 by DW -- 0.5.55" created="Sun, 14 Aug 2022 22:14:14 GMT">
					<outline text="New userLogonCallback callback. Called when the user has successfully logged in via davetwitter. We send back the information about the login, the user's screenname, userid, token and secret. " created="Sun, 14 Aug 2022 22:05:08 GMT"/>
					</outline>
				<outline text="#### 8/10/22 by DW -- 0.5.53, 0.5.54" created="Wed, 10 Aug 2022 14:48:22 GMT">
					<outline text="In returnServerHomePage we add a new param to the addMacroToPagetable callback, the request object. " created="Wed, 10 Aug 2022 14:48:23 GMT"/>
					</outline>
				<outline text="#### 7/21/22 by DW -- 0.5.52" created="Thu, 21 Jul 2022 19:01:49 GMT">
					<outline text="New config setting, config.whitelist. Defaults to undefined. " created="Thu, 21 Jul 2022 19:02:23 GMT"/>
					<outline text="If undefined, the app doesn't have a whitelist and anyone is authorized to use it, ie everyone is whitelisted. " created="Thu, 21 Jul 2022 19:03:37 GMT"/>
					<outline text="If not undefined, it's an array of screennames of people who are authorized to use the software. " created="Thu, 21 Jul 2022 19:02:42 GMT"/>
					<outline text="There's a new call /useriswhitelisted that determines if a user is whitelisted. " created="Thu, 21 Jul 2022 19:03:06 GMT"/>
					</outline>
				<outline text="#### 7/3/22 by DW -- 0.5.49" created="Sun, 03 Jul 2022 15:31:58 GMT">
					<outline text="In writeWholeFile if config.publishFile was defined, we'd call back with a type param that wasn't defined. We defined it. " created="Sun, 03 Jul 2022 15:32:08 GMT"/>
					<outline text="Added this file to the project to be consistent with other new projects." created="Sun, 03 Jul 2022 15:56:30 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;daveappserver&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Factored code that was appearing in all my servers.&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.7.6&quot;,"/>
					<outline text="&quot;main&quot;: &quot;appserver.js&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot; : &quot;git&quot;,"/>
						<outline text="&quot;url&quot; : &quot;https://github.com/scripting/appServer&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;appserver.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;querystring&quot;: &quot;*&quot;,"/>
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;nodejs-websocket&quot;: &quot;*&quot;,"/>
						<outline text="&quot;require-from-string&quot;: &quot;*&quot;," created="Fri, 10 Feb 2023 21:43:33 GMT"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davefilesystem&quot;: &quot;*&quot;,"/>
						<outline text="&quot;foldertojson&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davetwitter&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davezip&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davesql&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daves3&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davemail&quot;: &quot;*&quot;,"/>
						<outline text="&quot;wpidentity&quot;: &quot;*&quot;" created="Sun, 10 Sep 2023 20:24:57 GMT"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="appserver.js">
				<outline text="var myVersion = &quot;0.7.6&quot;, myProductName = &quot;daveAppServer&quot;;  " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="exports.start = startup; "/>
				<outline text="exports.notifySocketSubscribers = notifySocketSubscribers;"/>
				<outline text="exports.saveStats = saveStats;"/>
				<outline text="exports.getStats = getStats; //6/28/21 by DW"/>
				<outline text="exports.getConfig = getConfig;"/>
				<outline text="exports.publishFile = publishFile; //12/13/21 by DW"/>
				<outline text="exports.readWholeFile = readWholeFile; //5/28/22 by DW" created="Sat, 28 May 2022 18:52:36 GMT"/>
				<outline text="exports.writeWholeFile = writeWholeFile; //5/28/22 by DW" created="Sat, 28 May 2022 18:52:36 GMT"/>
				<outline text="exports.getFilePath = getFilePath; //9/13/22 by DW" created="Tue, 13 Sep 2022 17:43:32 GMT"/>
				<outline text="exports.requestWithRedirect = requestWithRedirect; //9/13/22 by DW" isComment="true" created="Tue, 13 Sep 2022 17:43:32 GMT"/>
				<outline text=""/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="var dns = require (&quot;dns&quot;);"/>
				<outline text="var os = require (&quot;os&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const websocket = require (&quot;nodejs-websocket&quot;); "/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;);"/>
				<outline text="const davetwitter = require (&quot;davetwitter&quot;);"/>
				<outline text="const filesystem = require (&quot;davefilesystem&quot;); "/>
				<outline text="const folderToJson = require (&quot;foldertojson&quot;);" created="Sun, 21 Feb 2021 18:12:39 GMT"/>
				<outline text="const zip = require (&quot;davezip&quot;);"/>
				<outline text="const opmlToJs = require (&quot;opmltojs&quot;);" isComment="true"/>
				<outline text="const rss = require (&quot;daverss&quot;);" isComment="true"/>
				<outline text="const s3 = require (&quot;daves3&quot;); "/>
				<outline text="const qs = require (&quot;querystring&quot;);"/>
				<outline text="const mail = require (&quot;davemail&quot;);"/>
				<outline text="const requireFromString = require (&quot;require-from-string&quot;); //2/10/23 by DW"/>
				<outline text="const davesql = require (&quot;davesql&quot;); //8/14/23 by DW"/>
				<outline text="const wordpress = require (&quot;wpidentity&quot;); //9/10/23 by DW" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text=""/>
				<outline text="const whenStart = new Date ();"/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="productName: &quot;randomApp&quot;,"/>
					<outline text="productNameForDisplay: &quot;Random App&quot;,"/>
					<outline text="version: myVersion,"/>
					<outline text="prefsPath: &quot;prefs.json&quot;,"/>
					<outline text="docsPath: &quot;myDocs/&quot;,"/>
					<outline text="flLogToConsole: true,"/>
					<outline text="port: process.env.PORT || 1420,"/>
					<outline text="websocketPort: 1422,"/>
					<outline text="flAllowAccessFromAnywhere: true,"/>
					<outline text="flPostEnabled: true, //12/21/20 by DW"/>
					<outline text="flWebsocketEnabled: true,"/>
					<outline text="urlServerForClient: &quot;http://tagserver.opml.org/&quot;," isComment="true"/>
					<outline text="urlWebsocketServerForClient: &quot;ws://tagserver.opml.org:1422/&quot;," isComment="true"/>
					<outline text="flEnableLogin: true, //user can log in via twitter"/>
					<outline text="blockedAddresses: [], "/>
					<outline text="flForceTwitterLogin: true,"/>
					<outline text="flUseTwitterIdentity: false, //2/6/23 by DW" created="Mon, 06 Feb 2023 17:09:06 GMT"/>
					<outline text="flTraceOnError: false, //8/15/23 by DW" created="Tue, 15 Aug 2023 22:54:15 GMT"/>
					<outline text=""/>
					<outline text="flStorageEnabled: true,"/>
					<outline text="privateFilesPath: &quot;privateFiles/users/&quot;,"/>
					<outline text="publicFilesPath: &quot;publicFiles/users/&quot;,"/>
					<outline text="" created="Tue, 03 Aug 2021 21:24:46 GMT"/>
					<outline text="defaultContentType: &quot;text/plain&quot;, //8/3/21 by DW" created="Tue, 03 Aug 2021 21:24:46 GMT"/>
					<outline text="" created="Mon, 08 Nov 2021 22:12:08 GMT"/>
					<outline text="userAgent: myProductName + &quot; v&quot; + myVersion, //11/8/21 by DW" created="Mon, 08 Nov 2021 22:12:09 GMT"/>
					<outline text="" created="Thu, 21 Jul 2022 18:58:24 GMT"/>
					<outline text="whitelist: undefined, //7/21/22 by DW" created="Thu, 21 Jul 2022 18:58:24 GMT"/>
					<outline text="" created="Wed, 07 Dec 2022 19:00:30 GMT"/>
					<outline text="confirmEmailSubject: &quot;FeedLand confirmation&quot;, //12/7/22 by DW" created="Fri, 04 Nov 2022 14:51:30 GMT"/>
					<outline text="fnameEmailTemplate: &quot;emailtemplate.html&quot;," created="Fri, 04 Nov 2022 14:52:11 GMT"/>
					<outline text="operationToConfirm: &quot;add your email address to your FeedLand user profile&quot;," created="Fri, 04 Nov 2022 15:13:53 GMT"/>
					<outline text="mailSender: &quot;dave@scripting.com&quot;," created="Fri, 04 Nov 2022 14:52:49 GMT"/>
					<outline text="dataFolder: &quot;data/&quot;," created="Fri, 04 Nov 2022 14:54:03 GMT"/>
					<outline text="confirmationExpiresAfter: 60 * 60 * 24, //emails expire after 24 hours" created="Wed, 07 Dec 2022 23:49:52 GMT"/>
					<outline text="" created="Wed, 08 Feb 2023 15:15:56 GMT"/>
					<outline text="flSecureWebsocket: false, //2/8/23 by DW" created="Wed, 08 Feb 2023 15:15:56 GMT"/>
					<outline text="" created="Wed, 15 Feb 2023 14:43:23 GMT"/>
					<outline text="flUseS3ForStorage: false, //2/15/23 by DW" created="Wed, 15 Feb 2023 14:43:44 GMT"/>
					<outline text="" created="Mon, 14 Aug 2023 15:56:57 GMT"/>
					<outline text="flUseDatabaseForConfirmations: false, //8/14/23 by DW" created="Mon, 14 Aug 2023 15:56:57 GMT"/>
					<outline text="" created="Mon, 06 Feb 2023 15:12:41 GMT"/>
					<outline text="isUserInDatabase: function (screenname, callback) { //2/6/23 by DW" created="Mon, 06 Feb 2023 15:12:42 GMT">
						<outline text="callback (false);" created="Mon, 06 Feb 2023 15:12:57 GMT"/>
						<outline text="}," created="Mon, 06 Feb 2023 15:12:48 GMT"/>
						</outline>
					<outline text="getScreenNameFromEmail: function (screenname, callback) { //2/7/23 by DW" created="Mon, 06 Feb 2023 15:12:42 GMT">
						<outline text="callback (undefined, screenname);" created="Mon, 06 Feb 2023 15:12:57 GMT"/>
						<outline text="}" created="Mon, 06 Feb 2023 15:12:48 GMT"/>
						</outline>
					<outline text="};"/>
					</outline>
				<outline text="const fnameConfig = &quot;config.json&quot;;"/>
				<outline text=""/>
				<outline text="var stats = {">
					<outline text="whenFirstStart: whenStart, ctStarts: 0,"/>
					<outline text="whenLastStart: undefined,"/>
					<outline text="ctWrites: 0,"/>
					<outline text="ctHits: 0, ctHitsToday: 0, ctHitsThisRun:0, "/>
					<outline text="whenLastHit: new Date (0),"/>
					<outline text="pendingConfirmations: new Array () //12/7/22 by DW" created="Wed, 07 Dec 2022 18:59:22 GMT"/>
					<outline text="};"/>
					</outline>
				<outline text="const fnameStats = &quot;stats.json&quot;;"/>
				<outline text="" created="Fri, 16 Sep 2022 13:05:46 GMT"/>
				<outline text="" created="Fri, 16 Sep 2022 13:04:12 GMT"/>
				<outline text="function userIsWhitelisted (screenname, callback) { //9/16/22 by DW" created="Fri, 16 Sep 2022 13:04:12 GMT">
					<outline text="Changes" isComment="true" created="Fri, 16 Sep 2022 13:06:01 GMT">
						<outline text="9/16/22; 9:06:03 AM by DW" created="Fri, 16 Sep 2022 13:06:02 GMT">
							<outline text="We read config.json so the system doesn't have to be rebooted to reflect a change to the whitelist. " created="Fri, 16 Sep 2022 13:06:04 GMT"/>
							</outline>
						</outline>
					<outline text="fs.readFile (fnameConfig, function (err, jsontext) {" created="Fri, 16 Sep 2022 13:07:26 GMT">
						<outline text="var flWhitelisted = false; " created="Thu, 21 Jul 2022 19:44:33 GMT"/>
						<outline text="if (!err) {" created="Fri, 16 Sep 2022 13:07:59 GMT">
							<outline text="var jstruct;" created="Fri, 16 Sep 2022 13:14:16 GMT"/>
							<outline text="try {" created="Fri, 16 Sep 2022 13:11:45 GMT">
								<outline text="jstruct = JSON.parse (jsontext);" created="Fri, 16 Sep 2022 13:08:14 GMT"/>
								<outline text="if (jstruct.whitelist === undefined) { //no whitelist" created="Thu, 21 Jul 2022 19:42:04 GMT">
									<outline text="flWhitelisted = true;" created="Fri, 16 Sep 2022 13:13:16 GMT"/>
									<outline text="}" created="Thu, 21 Jul 2022 19:42:23 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 16 Sep 2022 13:13:14 GMT">
									<outline text="flWhitelisted = jstruct.whitelist.includes (screenname);" created="Fri, 22 Jul 2022 14:47:40 GMT"/>
									<outline text="}" created="Fri, 16 Sep 2022 13:13:23 GMT"/>
									</outline>
								<outline text="}" created="Fri, 16 Sep 2022 13:11:48 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Fri, 16 Sep 2022 13:11:49 GMT">
								<outline text="}" created="Fri, 16 Sep 2022 13:11:53 GMT"/>
								</outline>
							<outline text="}" created="Fri, 16 Sep 2022 13:08:04 GMT"/>
							</outline>
						<outline text="console.log (&quot;userIsWhitelisted: screenname == &quot; + screenname + &quot;, flWhitelisted == &quot; + flWhitelisted);" created="Fri, 22 Jul 2022 14:04:30 GMT"/>
						<outline text="callback (undefined, {flWhitelisted});" created="Fri, 16 Sep 2022 13:06:41 GMT"/>
						<outline text="});" created="Fri, 16 Sep 2022 13:07:50 GMT"/>
						</outline>
					<outline text="}" created="Fri, 16 Sep 2022 13:05:10 GMT"/>
					</outline>
				<outline text="function decodeBase64Post (theText) { //9/8/21 by DW" isComment="true" created="Wed, 08 Sep 2021 19:28:22 GMT">
					<outline text="Changes" isComment="true" created="Wed, 08 Sep 2021 19:32:52 GMT">
						<outline text="9/8/21; 3:32:54 PM by DW" created="Wed, 08 Sep 2021 19:32:54 GMT">
							<outline text="The text should begin with something like data:image/png;base64, to get special processing" created="Wed, 08 Sep 2021 19:32:55 GMT"/>
							</outline>
						</outline>
					<outline text="if (utils.beginsWith (theText, &quot;data:image&quot;)) {" created="Wed, 08 Sep 2021 23:19:28 GMT">
						<outline text="var s = theText.replace (/^data:image\/(png|jpg);base64,/, &quot;&quot;);" created="Wed, 08 Sep 2021 23:19:28 GMT"/>
						<outline text="var buffer = Buffer.from (s, &quot;base64&quot;); "/>
						<outline text="return (buffer.toString ());" created="Wed, 08 Sep 2021 19:38:10 GMT"/>
						<outline text="}" created="Wed, 08 Sep 2021 23:20:52 GMT"/>
						</outline>
					<outline text="else {" created="Wed, 08 Sep 2021 23:21:43 GMT">
						<outline text="return (theText);" created="Wed, 08 Sep 2021 19:38:17 GMT"/>
						<outline text="}" created="Wed, 08 Sep 2021 23:21:46 GMT"/>
						</outline>
					<outline text="" isComment="true" created="Wed, 08 Sep 2021 23:19:28 GMT"/>
					<outline text="" isComment="true" created="Wed, 08 Sep 2021 23:19:28 GMT"/>
					<outline text="" isComment="true" created="Wed, 08 Sep 2021 23:19:28 GMT"/>
					<outline text="" isComment="true" created="Wed, 08 Sep 2021 23:19:29 GMT"/>
					<outline text="" isComment="true" created="Wed, 08 Sep 2021 23:19:29 GMT"/>
					<outline text="function pop (lookfor) {" isComment="true" created="Wed, 08 Sep 2021 19:35:02 GMT">
						<outline text="if (utils.beginsWith (s, lookfor)) {" created="Wed, 08 Sep 2021 19:35:12 GMT">
							<outline text="s = utils.stringDelete (s, 1, lookfor.length);" created="Wed, 08 Sep 2021 19:35:47 GMT"/>
							<outline text="return (true);" created="Wed, 08 Sep 2021 19:35:28 GMT"/>
							<outline text="}" created="Wed, 08 Sep 2021 19:35:23 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 08 Sep 2021 19:36:15 GMT">
							<outline text="return (false);" created="Wed, 08 Sep 2021 19:36:17 GMT"/>
							<outline text="}" created="Wed, 08 Sep 2021 19:36:21 GMT"/>
							</outline>
						<outline text="}" created="Wed, 08 Sep 2021 19:36:23 GMT"/>
						</outline>
					<outline text="if (pop (&quot;data:&quot;)) {" isComment="true" created="Wed, 08 Sep 2021 19:29:46 GMT">
						<outline text="var type = utils.stringNthField (s, &quot;;&quot;, 1); " created="Wed, 08 Sep 2021 19:31:12 GMT"/>
						<outline text="s = utils.stringDelete (s, 1, type.length + 1);" created="Wed, 08 Sep 2021 19:30:39 GMT"/>
						<outline text="if (pop (&quot;base64,&quot;)) {" created="Wed, 08 Sep 2021 19:34:37 GMT">
							<outline text="var buffer = Buffer.from (s, &quot;base64&quot;); "/>
							<outline text="return (buffer.toString ());" created="Wed, 08 Sep 2021 19:38:10 GMT"/>
							<outline text="}" created="Wed, 08 Sep 2021 19:37:22 GMT"/>
							</outline>
						<outline text="}" created="Wed, 08 Sep 2021 19:47:09 GMT"/>
						</outline>
					<outline text="return (theText);" isComment="true" created="Wed, 08 Sep 2021 19:38:17 GMT"/>
					<outline text="}" created="Wed, 08 Sep 2021 19:28:40 GMT"/>
					</outline>
				<outline text="function statsChanged () {">
					<outline text="flStatsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function saveStats (theStats) {">
					<outline text="for (var x in theStats) {">
						<outline text="stats [x] = theStats [x];"/>
						<outline text="}"/>
						</outline>
					<outline text="statsChanged ();"/>
					<outline text="}"/>
					</outline>
				<outline text="function getStats () { //6/28/21 by DW">
					<outline text="return (stats);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getConfig () {">
					<outline text="return (config);"/>
					<outline text="}"/>
					</outline>
				<outline text="function httpReadUrl (url, callback) {" created="Mon, 20 Jan 2014 17:26:34 GMT" pgfnum="36035">
					<outline text="request (url, function (err, response, data) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (response.statusCode != 200) {">
								<outline text="const errstruct = {">
									<outline text="message: &quot;Can't read the URL, \&quot;&quot; + url + &quot;\&quot; because we received a status code of &quot; + response.statusCode + &quot;.&quot;,"/>
									<outline text="statusCode: response.statusCode"/>
									<outline text="};"/>
									</outline>
								<outline text="callback (errstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, data);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Mon, 20 Jan 2014 17:26:49 GMT" pgfnum="36038"/>
					</outline>
				<outline text="function httpFullRequest (jsontext, callback) { //11/5/21 by DW" created="Fri, 05 Nov 2021 15:09:20 GMT">
					<outline text="Changes" isComment="true" created="Fri, 05 Nov 2021 15:12:12 GMT">
						<outline text="11/8/21; 8:43:44 AM by DW" created="Mon, 08 Nov 2021 13:43:44 GMT">
							<outline text="Include data in the errstruct we return for a statusCode that is not 200." created="Mon, 08 Nov 2021 13:43:45 GMT"/>
							<outline text="Don't call it an error if the error code is 201 through 299. GitHub returns 204, as reported by Scott Hanson." created="Mon, 08 Nov 2021 13:49:53 GMT">
								<outline text="https://github.com/scripting/appServer/blob/main/appserver.js" created="Mon, 08 Nov 2021 13:50:23 GMT"/>
								</outline>
							</outline>
						<outline text="11/5/21; 11:12:16 AM by DW" created="Fri, 05 Nov 2021 15:12:15 GMT">
							<outline text="Send me a struct with the parameters for a request call and we'll do it and return the result. " created="Fri, 05 Nov 2021 15:15:42 GMT"/>
							</outline>
						</outline>
					<outline text="var theRequest;" created="Fri, 05 Nov 2021 16:04:56 GMT"/>
					<outline text="function isErrorStatusCode (theCode) { //11/8/21 by DW" created="Mon, 08 Nov 2021 13:45:39 GMT">
						<outline text="return ((theCode &lt; 200) || (theCode &gt; 299));" created="Mon, 08 Nov 2021 13:49:01 GMT"/>
						<outline text="}" created="Mon, 08 Nov 2021 13:45:50 GMT"/>
						</outline>
					<outline text="try {" created="Fri, 05 Nov 2021 16:04:56 GMT">
						<outline text="theRequest = JSON.parse (jsontext);" created="Fri, 05 Nov 2021 16:04:23 GMT"/>
						<outline text="}" created="Fri, 05 Nov 2021 16:05:01 GMT"/>
						</outline>
					<outline text="catch (err) {" created="Fri, 05 Nov 2021 16:05:02 GMT">
						<outline text="callback (err);" created="Fri, 05 Nov 2021 16:05:14 GMT"/>
						<outline text="return;" created="Fri, 05 Nov 2021 16:05:19 GMT"/>
						<outline text="}" created="Fri, 05 Nov 2021 16:05:06 GMT"/>
						</outline>
					<outline text="request (theRequest, function (err, response, data) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (isErrorStatusCode (response.statusCode)) { //11/8/21 by DW">
								<outline text="const errstruct = {">
									<outline text="message: &quot;Can't read the URL, \&quot;&quot; + theRequest.url + &quot;\&quot; because we received a status code of &quot; + response.statusCode + &quot;.&quot;,"/>
									<outline text="statusCode: response.statusCode,"/>
									<outline text="data //11/8/21 by DW" created="Mon, 08 Nov 2021 13:44:25 GMT"/>
									<outline text="};"/>
									</outline>
								<outline text="callback (errstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, data);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Fri, 05 Nov 2021 15:09:32 GMT"/>
					</outline>
				<outline text="function checkPathForIllegalChars (path) {">
					<outline text="Changes" isComment="true">
						<outline text="2/8/23; 12:25:44 PM by DW" created="Wed, 08 Feb 2023 17:25:43 GMT">
							<outline text="Added @ since email addresses have them." created="Wed, 08 Feb 2023 17:25:44 GMT"/>
							</outline>
						<outline text="5/10/15; 7:08:13 PM by DW">
							<outline text="* is legal."/>
							</outline>
						</outline>
					<outline text="function isIllegal (ch) {">
						<outline text="if (utils.isAlpha (ch) || utils.isNumeric (ch)) {">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="switch (ch) {">
							<outline text="case &quot;/&quot;: case &quot;_&quot;: case &quot;-&quot;: case &quot;.&quot;:  case &quot; &quot;: case &quot;*&quot;: case &quot;@&quot;:">
								<outline text="return (false);"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (true);"/>
						<outline text="}"/>
						</outline>
					<outline text="for (var i = 0; i &lt; path.length; i++) {">
						<outline text="if (isIllegal (path [i])) {">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (utils.stringContains (path, &quot;./&quot;)) {">
						<outline text="return (false);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (true);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getDomainName (clientIp, callback) { //11/14/15 by DW">
					<outline text="Changes" isComment="true" created="Thu, 27 Jul 2023 18:26:58 GMT">
						<outline text="7/27/23; 2:27:02 PM by DW" created="Thu, 27 Jul 2023 18:27:00 GMT">
							<outline text="dns.reverse can crash the app if you provide an IP v6 address." created="Thu, 27 Jul 2023 18:27:02 GMT"/>
							</outline>
						</outline>
					<outline text="if (clientIp === undefined) {">
						<outline text="if (callback !== undefined) {">
							<outline text="callback (&quot;undefined&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="try { //7/27/23 by DW" created="Thu, 27 Jul 2023 18:26:17 GMT">
							<outline text="dns.reverse (clientIp, function (err, domains) {">
								<outline text="var name = clientIp;"/>
								<outline text="if (!err) {">
									<outline text="if (domains.length &gt; 0) {">
										<outline text="name = domains [0];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (callback !== undefined) {">
									<outline text="callback (name);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Thu, 27 Jul 2023 18:26:21 GMT"/>
							</outline>
						<outline text="catch (err) {" created="Thu, 27 Jul 2023 18:26:22 GMT">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (name);"/>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Thu, 27 Jul 2023 18:26:25 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getDomainNameVerb (clientIp, callback) { //2/27/21 by DW" created="Sat, 27 Feb 2021 16:54:08 GMT">
					<outline text="Changes" isComment="true" created="Sat, 27 Feb 2021 16:59:51 GMT">
						<outline text="2/27/21; 11:59:56 AM by DW" created="Sat, 27 Feb 2021 16:59:55 GMT">
							<outline text="Called from a user script on a client machine. Uses the standard callback interface. " created="Sat, 27 Feb 2021 16:59:57 GMT"/>
							</outline>
						</outline>
					<outline text="dns.reverse (clientIp, function (err, domains) {">
						<outline text="if (err) {" created="Sat, 27 Feb 2021 17:00:43 GMT">
							<outline text="callback (err);" created="Sat, 27 Feb 2021 17:00:52 GMT"/>
							<outline text="}" created="Sat, 27 Feb 2021 17:00:45 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 27 Feb 2021 17:00:46 GMT">
							<outline text="var name = (domains.length &gt; 0) ? name = domains [0] : clientIp;" created="Sat, 27 Feb 2021 17:01:31 GMT"/>
							<outline text="callback (undefined, {name});"/>
							<outline text="}" created="Sat, 27 Feb 2021 17:00:48 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Sat, 27 Feb 2021 16:54:33 GMT"/>
					</outline>
				<outline text="function getDottedIdVerb (name, callback) { //2/27/21 by DW" created="Sat, 27 Feb 2021 17:20:47 GMT">
					<outline text="dns.lookup (name, null, function (err, dottedid) {">
						<outline text="if (err) {">
							<outline text="callback (err);" created="Sat, 27 Feb 2021 17:22:48 GMT"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback (undefined, {dottedid});" created="Sat, 27 Feb 2021 17:23:17 GMT"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Sat, 27 Feb 2021 17:20:58 GMT"/>
					</outline>
				<outline text="function cleanFileStats (stats) { //4/19/21 by DW" created="Mon, 19 Apr 2021 13:42:19 GMT">
					<outline text="function formatDate (d) {" created="Thu, 01 Apr 2021 14:36:30 GMT">
						<outline text="return (new Date (d).toUTCString ());" created="Thu, 01 Apr 2021 14:36:38 GMT"/>
						<outline text="}" created="Thu, 01 Apr 2021 14:36:51 GMT"/>
						</outline>
					<outline text="var cleanStats = {" created="Mon, 19 Apr 2021 13:43:04 GMT">
						<outline text="size: stats.size, //number of bytes in file"/>
						<outline text="whenAccessed: formatDate (stats.atime), //when last read"/>
						<outline text="whenCreated: formatDate (stats.birthtime)," created="Sun, 21 Feb 2021 21:39:45 GMT"/>
						<outline text="whenModified: formatDate (stats.mtime)," created="Sun, 21 Feb 2021 21:39:01 GMT"/>
						<outline text="flPrivate: stats.flPrivate" created="Thu, 01 Apr 2021 14:32:14 GMT"/>
						<outline text="}" created="Mon, 19 Apr 2021 13:43:21 GMT"/>
						</outline>
					<outline text="return (cleanStats);" created="Mon, 19 Apr 2021 13:43:25 GMT"/>
					<outline text="}" created="Mon, 19 Apr 2021 13:42:24 GMT"/>
					</outline>
				<outline text="function requestWithRedirect (theRequest, callback) { //12/11/22 by DW" isComment="true" created="Wed, 28 Sep 2022 17:11:16 GMT">
					<outline text="Changes" isComment="true" created="Sun, 11 Dec 2022 15:02:32 GMT">
						<outline text="12/11/22; 10:02:34 AM by DW" created="Sun, 11 Dec 2022 15:02:34 GMT">
							<outline text="Andrew Shell says that request doesn't pass through the body of a request through callbacks. So we created a version of request that does." created="Sun, 11 Dec 2022 15:02:35 GMT">
								<outline text="https://gist.github.com/andrewshell/8b57f96bf62a1dea9fa1a8137e13951a?permalink_comment_id=4398360#gistcomment-4398360" created="Sun, 11 Dec 2022 15:03:35 GMT"/>
								</outline>
							<outline text="Andrew's version is below..." created="Sun, 11 Dec 2022 15:03:10 GMT">
								<outline text="function requestFollowRedirects(theRequest, callback) {">
									<outline text="theRequest.followAllRedirects = false;"/>
									<outline text="request (theRequest, function (err, response, body) {">
										<outline text="if (parseInt(theRequest.maxRedirects) &gt; 0 &amp;&amp; [301, 320].includes(response.statusCode) &amp;&amp; response.headers.location != null) {">
											<outline text="const newRequest = Object.assign({}, theRequest, { url: response.headers.location });"/>
											<outline text="newRequest.maxRedirects--;"/>
											<outline text="requestFollowRedirects (newRequest, callback);"/>
											<outline text="}"/>
											</outline>
										<outline text="callback (err, response, body)"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								</outline>
							</outline>
						</outline>
					<outline text="var myRequest = new Object ();" created="Sun, 11 Dec 2022 15:14:24 GMT"/>
					<outline text="for (var x in theRequest) {" created="Sun, 11 Dec 2022 15:14:41 GMT">
						<outline text="myRequest [x] = theRequest [x];" created="Sun, 11 Dec 2022 15:14:47 GMT"/>
						<outline text="}" created="Sun, 11 Dec 2022 15:14:55 GMT"/>
						</outline>
					<outline text="myRequest.followAllRedirects = false; //we're doing this ourselves"/>
					<outline text="myRequest.maxRedirects = (myRequest.maxRedirects === undefined) ? 0 : myRequest.maxRedirects;" created="Sun, 11 Dec 2022 15:17:25 GMT"/>
					<outline text="request (myRequest, function (err, response, body) {" created="Sun, 11 Dec 2022 14:56:02 GMT">
						<outline text="const code = response.statusCode;" created="Sun, 11 Dec 2022 14:57:09 GMT"/>
						<outline text="if ((code == 301) || (code == 302)) { //redirect" created="Sun, 11 Dec 2022 14:57:18 GMT">
							<outline text="if (myRequest.maxRedirects == 0) {" created="Sun, 11 Dec 2022 15:00:40 GMT">
								<outline text="callback (err, response, body);" created="Sun, 11 Dec 2022 15:00:55 GMT"/>
								<outline text="}" created="Sun, 11 Dec 2022 15:00:52 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 11 Dec 2022 15:01:24 GMT">
								<outline text="myRequest.maxRedirects--;" created="Sun, 11 Dec 2022 15:01:30 GMT"/>
								<outline text="myRequest.url = response.headers.location;" created="Sun, 11 Dec 2022 15:12:05 GMT"/>
								<outline text="requestWithRedirect (myRequest, callback);" created="Sun, 11 Dec 2022 15:01:38 GMT"/>
								<outline text="}" created="Sun, 11 Dec 2022 15:01:26 GMT"/>
								</outline>
							<outline text="}" created="Sun, 11 Dec 2022 14:57:33 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 11 Dec 2022 15:02:08 GMT">
							<outline text="callback (err, response, body);" created="Sun, 11 Dec 2022 15:02:09 GMT"/>
							<outline text="}" created="Sun, 11 Dec 2022 15:10:23 GMT"/>
							</outline>
						<outline text="});" created="Sun, 11 Dec 2022 14:56:02 GMT"/>
						</outline>
					<outline text="}" created="Sun, 11 Dec 2022 14:55:31 GMT"/>
					</outline>
				<outline text=""/>
				<outline text="//sockets">
					<outline text="var theWsServer = undefined;"/>
					<outline text=""/>
					<outline text="function getWsProtocol () { //2/8/23 by DW" created="Wed, 08 Feb 2023 15:05:23 GMT">
						<outline text="const protocol = (utils.getBoolean (config.flSecureWebsocket)) ? &quot;wss://&quot; : &quot;ws://&quot;;" created="Wed, 08 Feb 2023 15:04:20 GMT"/>
						<outline text="return (protocol);" created="Wed, 08 Feb 2023 15:05:36 GMT"/>
						<outline text="}" created="Wed, 08 Feb 2023 15:05:30 GMT"/>
						</outline>
					<outline text="function notifySocketSubscribers (verb, payload, flPayloadIsString, callbackToQualify) {">
						<outline text="Changes" isComment="true" created="Sat, 06 Mar 2021 17:36:54 GMT">
							<outline text="3/6/21; 12:36:58 PM by DW" created="Sat, 06 Mar 2021 17:36:56 GMT">
								<outline text="New optional param, flPayloadIsString. If true we don't treat the payload as if it were a JS object. " created="Sat, 06 Mar 2021 17:36:58 GMT"/>
								<outline text="New optional param, callbackToQualify, if specified we call it on each connection, if it returns true it qualifies to be notified" created="Sat, 06 Mar 2021 20:22:29 GMT"/>
								</outline>
							</outline>
						<outline text="if (theWsServer !== undefined) {">
							<outline text="var ctUpdates = 0, now = new Date (), ctTotalSockets = 0;"/>
							<outline text="if (payload !== undefined) { ">
								<outline text="if (!flPayloadIsString) {" created="Sat, 06 Mar 2021 17:38:36 GMT">
									<outline text="payload = utils.jsonStringify (payload);"/>
									<outline text="}" created="Sat, 06 Mar 2021 17:38:42 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="theWsServer.connections.forEach (function (conn, ix) {">
								<outline text="ctTotalSockets++;" created="Sat, 06 Mar 2021 20:35:11 GMT"/>
								<outline text="if (conn.appData !== undefined) { //it's one of ours">
									<outline text="var flnotify = true;" created="Sat, 06 Mar 2021 20:23:38 GMT"/>
									<outline text="if (callbackToQualify !== undefined) {" created="Sat, 06 Mar 2021 20:23:48 GMT">
										<outline text="flnotify = callbackToQualify (conn);" created="Sat, 06 Mar 2021 20:23:59 GMT"/>
										<outline text="}" created="Sat, 06 Mar 2021 20:23:53 GMT"/>
										</outline>
									<outline text="if (flnotify) {" created="Sat, 06 Mar 2021 20:24:14 GMT">
										<outline text="try {">
											<outline text="conn.sendText (verb + &quot;\r&quot; + payload);"/>
											<outline text="conn.appData.whenLastUpdate = now;"/>
											<outline text="conn.appData.ctUpdates++;"/>
											<outline text="ctUpdates++;"/>
											<outline text="}"/>
											</outline>
										<outline text="catch (err) {">
											<outline text="console.log (&quot;notifySocketSubscribers: socket #&quot; + i + &quot;: error updating&quot;);"/>
											<outline text="}"/>
											</outline>
										<outline text="}" created="Sat, 06 Mar 2021 20:24:17 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="console.log (&quot;\nnotifySocketSubscribers: &quot; + ctUpdates + &quot; of &quot; + ctTotalSockets + &quot; sockets were updated.\n&quot;);" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function checkWebSocketCalls () { //expire timed-out calls">
						<outline text="}"/>
						</outline>
					<outline text="function countOpenSockets () {">
						<outline text="if (theWsServer === undefined) { //12/18/15 by DW">
							<outline text="return (0);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="return (theWsServer.connections.length);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getOpenSocketsArray () { //return an array with data about open sockets">
						<outline text="var theArray = new Array ();"/>
						<outline text="theWsServer.connections.forEach (function (conn, ix) {">
							<outline text="if (conn.appData !== undefined) { //it's one of ours">
								<outline text="theArray.push ({">
									<outline text="arrayIndex: ix,"/>
									<outline text="lastVerb: conn.appData.lastVerb,"/>
									<outline text="urlToWatch: conn.appData.urlToWatch,"/>
									<outline text="domain: conn.appData.domain,"/>
									<outline text="whenStarted: utils.viewDate (conn.appData.whenStarted),"/>
									<outline text="whenLastUpdate: utils.viewDate (conn.appData.whenLastUpdate)"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="return (theArray);"/>
						<outline text="" isComment="true"/>
						<outline text="for (var i = 0; i &lt; theWsServer.connections.length; i++) {" isComment="true">
							<outline text="var conn = theWsServer.connections [i];"/>
							<outline text="if (conn.chatLogData !== undefined) { //it's one of ours">
								<outline text="theArray [theArray.length] = {">
									<outline text="arrayIndex: i,"/>
									<outline text="lastVerb: conn.chatLogData.lastVerb,"/>
									<outline text="urlToWatch: conn.chatLogData.urlToWatch,"/>
									<outline text="domain: conn.chatLogData.domain,"/>
									<outline text="whenStarted: utils.viewDate (conn.chatLogData.whenStarted),"/>
									<outline text="whenLastUpdate: utils.viewDate (conn.chatLogData.whenLastUpdate)"/>
									<outline text="};"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function handleWebSocketConnection (conn) { ">
						<outline text="var now = new Date ();"/>
						<outline text="console.log (&quot;handleWebSocketConnection: conn.socket.remoteAddress == &quot; + conn.socket.remoteAddress); //6/7/21 by DW" isComment="true" created="Mon, 07 Jun 2021 17:25:37 GMT"/>
						<outline text="conn.appData = { //initialize">
							<outline text="whenStarted: now,"/>
							<outline text="ctUpdates: 0,"/>
							<outline text="whenLastUpdate: new Date (0),"/>
							<outline text="lastVerb: undefined,"/>
							<outline text="urlToWatch: undefined,"/>
							<outline text="domain: undefined"/>
							<outline text="};"/>
							</outline>
						<outline text=""/>
						<outline text="function logToConsole (conn, verb, value) {">
							<outline text="getDomainName (conn.socket.remoteAddress, function (theName) { //log the request">
								<outline text="var freemem = utils.gigabyteString (os.freemem ()), method = &quot;WS:&quot; + verb, now = new Date (); "/>
								<outline text="if (theName === undefined) {">
									<outline text="theName = conn.socket.remoteAddress;"/>
									<outline text="}"/>
									</outline>
								<outline text="console.log (now.toLocaleTimeString () + &quot; &quot; + freemem + &quot; &quot; + method + &quot; &quot; + value + &quot; &quot; + theName);"/>
								<outline text="conn.appData.domain = theName; "/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="" created="Tue, 14 Dec 2021 22:21:22 GMT"/>
						<outline text="function kissOtherLogonsGoodnight (screenname, theNewConnection) { //12/14/21 by DW" created="Tue, 14 Dec 2021 22:21:23 GMT">
							<outline text="Changes" isComment="true" created="Tue, 14 Dec 2021 22:21:48 GMT">
								<outline text="12/14/21; 5:21:51 PM by DW" created="Tue, 14 Dec 2021 22:21:50 GMT">
									<outline text="Loop over the other instances with the same screenname, and tell them to have a good night. " created="Tue, 14 Dec 2021 22:21:51 GMT"/>
									</outline>
								</outline>
							<outline text="theWsServer.connections.forEach (function (conn, ix) {">
								<outline text="if (conn.appData !== undefined) { //it's one of ours">
									<outline text="if (conn != theNewConnection) { //it's not the new one" created="Tue, 14 Dec 2021 22:26:03 GMT">
										<outline text="if (conn.appData.screenname == screenname) {" created="Tue, 14 Dec 2021 22:23:36 GMT">
											<outline text="console.log (&quot;kissOtherLogonsGoodnight: \&quot;&quot; + conn.appData.screenname + &quot;\&quot; = \&quot;&quot; + screenname + &quot;\&quot;&quot;); //2/12/23 by DW" created="Sun, 12 Feb 2023 15:53:13 GMT"/>
											<outline text="conn.sendText (&quot;goodnight&quot;);"/>
											<outline text="}" created="Tue, 14 Dec 2021 22:23:50 GMT"/>
											</outline>
										<outline text="}" created="Tue, 14 Dec 2021 22:26:10 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Tue, 14 Dec 2021 22:21:30 GMT"/>
							</outline>
						<outline text=""/>
						<outline text="conn.on (&quot;text&quot;, function (s) {">
							<outline text="var words = s.split (&quot; &quot;);"/>
							<outline text="console.log (&quot;handleWebSocketConnection: s == &quot; + s); //6/7/21 by DW" isComment="true" created="Mon, 07 Jun 2021 17:25:37 GMT"/>
							<outline text="if (words.length &gt; 1) { //new protocol as of 11/29/15 by DW">
								<outline text="conn.appData.whenLastUpdate = now;"/>
								<outline text="conn.appData.lastVerb = words [0];"/>
								<outline text="switch (words [0]) {">
									<outline text="case &quot;watch&quot;:">
										<outline text="conn.appData.urlToWatch = utils.trimWhitespace (words [1]);"/>
										<outline text="logToConsole (conn, conn.appData.lastVerb, conn.appData.urlToWatch);"/>
										<outline text="break;"/>
										</outline>
									<outline text="case &quot;user&quot;: //9/29/21 by DW" created="Wed, 29 Sep 2021 17:05:23 GMT">
										<outline text="if (config.flUseTwitterIdentity) { //2/12/23 by DW" created="Mon, 06 Feb 2023 17:40:04 GMT">
											<outline text="var token = words [1], secret = words [2];" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
											<outline text="conn.appData.twOauthToken = token;" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
											<outline text="conn.appData.twOauthTokenSecret = secret;" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
											<outline text="conn.appData.urlToWatch = &quot;&quot;;" created="Wed, 29 Sep 2021 17:12:17 GMT"/>
											<outline text="davetwitter.getScreenName (token, secret, function (screenname) {" created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784">
												<outline text="conn.appData.screenname = screenname;" created="Wed, 29 Sep 2021 17:09:07 GMT"/>
												<outline text="kissOtherLogonsGoodnight (screenname, conn); //12/14/21 by DW" created="Tue, 14 Dec 2021 22:20:44 GMT"/>
												<outline text="logToConsole (conn, conn.appData.lastVerb, conn.appData.screenname);"/>
												<outline text="});" created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785"/>
												</outline>
											<outline text="}" created="Mon, 06 Feb 2023 17:40:24 GMT"/>
											</outline>
										<outline text="else {" created="Mon, 06 Feb 2023 17:40:25 GMT">
											<outline text="var emailAddress = words [1], emailSecret = words [2];" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
											<outline text="config.isUserInDatabase (emailAddress, function (flInDatabase, userRec) {" created="Mon, 06 Feb 2023 15:06:38 GMT">
												<outline text="if (flInDatabase) {" created="Mon, 06 Feb 2023 15:07:20 GMT">
													<outline text="conn.appData.emailAddress = userRec.emailAddress;" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
													<outline text="conn.appData.screenname = userRec.emailAddress;" created="Wed, 29 Sep 2021 17:09:07 GMT"/>
													<outline text="conn.appData.emailSecret = userRec.emailSecret;" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
													<outline text="conn.appData.urlToWatch = &quot;&quot;;" created="Wed, 29 Sep 2021 17:12:17 GMT"/>
													<outline text="kissOtherLogonsGoodnight (conn.appData.screenname, conn); " created="Tue, 14 Dec 2021 22:20:44 GMT"/>
													<outline text="logToConsole (conn, conn.appData.lastVerb, conn.appData.screenname);"/>
													<outline text="}" created="Mon, 06 Feb 2023 15:07:23 GMT"/>
													</outline>
												<outline text="});" created="Mon, 06 Feb 2023 15:06:57 GMT"/>
												</outline>
											<outline text="}" created="Mon, 06 Feb 2023 17:40:27 GMT"/>
											</outline>
										<outline text="break;"/>
										</outline>
									<outline text="" created="Wed, 29 Sep 2021 17:05:23 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="conn.close ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="conn.on (&quot;close&quot;, function () {">
							<outline text="console.log (&quot;'close' message received.&quot;);" isComment="true"/>
							<outline text="});"/>
							</outline>
						<outline text="conn.on (&quot;error&quot;, function (err) {">
							<outline text="logToConsole (conn, &quot;error&quot;, err.code);" isComment="true"/>
							<outline text="conn.close (); //11/30/15 by DW -- https://github.com/scripting/betterWebSocketsDemo/issues/2#issuecomment-160658118" isComment="true"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function webSocketStartup () {">
						<outline text="if (config.flWebsocketEnabled) {">
							<outline text="try {">
								<outline text="theWsServer = websocket.createServer (handleWebSocketConnection);"/>
								<outline text="theWsServer = websocket.createServer (function (conn) {" isComment="true">
									<outline text="conn.bingeworthyData = {">
										<outline text="whenLastUpdate: new Date (0),"/>
										<outline text="ctUpdates: 0"/>
										<outline text="};"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="console.log (&quot;webSocketStartup: config.websocketPort == &quot; + config.websocketPort);"/>
								<outline text="theWsServer.listen (config.websocketPort);"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (&quot;webSocketStartup: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//s3 storage -- 2/14/23 by DW" created="Tue, 14 Feb 2023 22:58:02 GMT">
					<outline text="" created="Tue, 14 Feb 2023 23:27:56 GMT"/>
					<outline text="function getS3FilePath (screenname, relpath, flprivate) {" created="Tue, 14 Feb 2023 23:27:57 GMT">
						<outline text="const folder = (flprivate) ? config.privateFilesPath : config.publicFilesPath;"/>
						<outline text="const f = folder + screenname + &quot;/&quot; + relpath;"/>
						<outline text="const s3path = config.s3PathForStorage + f;" created="Tue, 14 Feb 2023 23:22:57 GMT"/>
						<outline text="return (s3path);" created="Tue, 14 Feb 2023 23:28:23 GMT"/>
						<outline text="}" created="Tue, 14 Feb 2023 23:28:14 GMT"/>
						</outline>
					<outline text="" created="Tue, 14 Feb 2023 23:27:57 GMT"/>
					<outline text="function getFileFromS3 (screenname, relpath, flprivate, callback) {" created="Tue, 14 Feb 2023 22:58:05 GMT">
						<outline text="function formatDate (d) {" created="Thu, 01 Apr 2021 14:36:30 GMT">
							<outline text="return (new Date (d).toUTCString ());" created="Thu, 01 Apr 2021 14:36:38 GMT"/>
							<outline text="}" created="Thu, 01 Apr 2021 14:36:51 GMT"/>
							</outline>
						<outline text="s3.getObject (getS3FilePath (screenname, relpath, flprivate), function (err, data) {">
							<outline text="if (err) {" created="Wed, 15 Feb 2023 13:49:06 GMT">
								<outline text="callback (err);" created="Wed, 15 Feb 2023 13:49:08 GMT"/>
								<outline text="}" created="Wed, 15 Feb 2023 13:49:11 GMT"/>
								</outline>
							<outline text="else {" created="Wed, 15 Feb 2023 13:49:12 GMT">
								<outline text="var data = {" created="Mon, 19 Apr 2021 13:39:52 GMT">
									<outline text="filedata: data.Body.toString ()," created="Mon, 19 Apr 2021 13:40:09 GMT"/>
									<outline text="filestats: {" created="Mon, 19 Apr 2021 13:41:55 GMT">
										<outline text="whenModified: formatDate (data.LastModified)" created="Wed, 15 Feb 2023 13:51:15 GMT"/>
										<outline text="}" created="Wed, 15 Feb 2023 13:51:03 GMT"/>
										</outline>
									<outline text="};" created="Mon, 19 Apr 2021 13:40:00 GMT"/>
									</outline>
								<outline text="callback (undefined, data);"/>
								<outline text="}" created="Wed, 15 Feb 2023 13:49:14 GMT"/>
								</outline>
							<outline text="});" created="Wed, 15 Feb 2023 13:47:05 GMT"/>
							</outline>
						<outline text="}" created="Tue, 14 Feb 2023 22:58:15 GMT"/>
						</outline>
					<outline text="function saveFileToS3 (screenname, relpath, type, flprivate, filetext, callback) {" created="Tue, 14 Feb 2023 23:27:30 GMT">
						<outline text="const acl = undefined; //use the default" created="Wed, 15 Feb 2023 13:26:49 GMT"/>
						<outline text="s3.newObject (getS3FilePath (screenname, relpath, flprivate), filetext, type, acl, callback);"/>
						<outline text="}" created="Tue, 14 Feb 2023 23:27:39 GMT"/>
						</outline>
					</outline>
				<outline text="//storage functions">
					<outline text="function getFilePath (screenname, relpath, flprivate) {">
						<outline text="const folder = (flprivate) ? config.privateFilesPath : config.publicFilesPath;"/>
						<outline text="const f = folder + screenname + &quot;/&quot; + relpath;"/>
						<outline text="return (f);"/>
						<outline text="}"/>
						</outline>
					<outline text="function findFile (screenname, relpath, callback) { //4/1/21 by DW" created="Thu, 01 Apr 2021 14:18:43 GMT">
						<outline text="Changes" isComment="true" created="Thu, 01 Apr 2021 14:19:09 GMT">
							<outline text="4/1/21; 10:19:11 AM by DW" created="Thu, 01 Apr 2021 14:19:10 GMT">
								<outline text="First look for the public version of the file, then the private, then not found." created="Thu, 01 Apr 2021 14:19:12 GMT"/>
								</outline>
							</outline>
						<outline text="var f = getFilePath (screenname, relpath, false); //public version"/>
						<outline text="fs.stat (f, function (err, stats) {" created="Thu, 01 Apr 2021 14:20:52 GMT">
							<outline text="if (err) {" created="Thu, 01 Apr 2021 14:21:14 GMT">
								<outline text="f = getFilePath (screenname, relpath, true); //private version"/>
								<outline text="fs.stat (f, function (err, stats) {" created="Thu, 01 Apr 2021 14:20:52 GMT">
									<outline text="if (err) {" created="Thu, 01 Apr 2021 14:21:14 GMT">
										<outline text="callback (err);" created="Thu, 01 Apr 2021 14:21:54 GMT"/>
										<outline text="}" created="Thu, 01 Apr 2021 14:21:18 GMT"/>
										</outline>
									<outline text="else {" created="Thu, 01 Apr 2021 14:21:22 GMT">
										<outline text="stats.flPrivate = true;" created="Thu, 01 Apr 2021 14:30:57 GMT"/>
										<outline text="callback (undefined, stats);" created="Thu, 01 Apr 2021 14:22:02 GMT"/>
										<outline text="}" created="Thu, 01 Apr 2021 14:21:25 GMT"/>
										</outline>
									<outline text="});" created="Thu, 01 Apr 2021 14:21:01 GMT"/>
									</outline>
								<outline text="}" created="Thu, 01 Apr 2021 14:21:18 GMT"/>
								</outline>
							<outline text="else {" created="Thu, 01 Apr 2021 14:21:22 GMT">
								<outline text="stats.flPrivate = false;" created="Thu, 01 Apr 2021 14:30:57 GMT"/>
								<outline text="callback (undefined, stats);" created="Thu, 01 Apr 2021 14:22:02 GMT"/>
								<outline text="}" created="Thu, 01 Apr 2021 14:21:25 GMT"/>
								</outline>
							<outline text="});" created="Thu, 01 Apr 2021 14:21:01 GMT"/>
							</outline>
						<outline text="}" created="Thu, 01 Apr 2021 14:19:01 GMT"/>
						</outline>
					<outline text="function publishFile (screenname, relpath, type, flprivate, filetext, callback) {">
						<outline text="Changes" isComment="true" created="Tue, 14 Feb 2023 23:32:18 GMT">
							<outline text="9/20/23; 4:39:26 PM by DW" created="Wed, 20 Sep 2023 20:39:25 GMT">
								<outline text="Allow the function to be overrideen by the containing app. " created="Wed, 20 Sep 2023 20:39:26 GMT"/>
								</outline>
							<outline text="2/14/23; 6:32:23 PM by DW" created="Tue, 14 Feb 2023 23:32:22 GMT">
								<outline text="if config.flUseS3ForStorage is true, we save the file to a location on Amazon S3." created="Tue, 14 Feb 2023 23:32:23 GMT"/>
								</outline>
							</outline>
						<outline text="if (config.publishStaticFile !== undefined) { //9/20/23 by DW" created="Wed, 20 Sep 2023 14:36:06 GMT">
							<outline text="config.publishStaticFile (screenname, relpath, type, flprivate, filetext, callback);" created="Wed, 20 Sep 2023 14:36:43 GMT"/>
							<outline text="}" created="Wed, 20 Sep 2023 14:36:21 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 20 Sep 2023 15:31:28 GMT">
							<outline text="if (config.flStorageEnabled) {">
								<outline text="if (config.flUseS3ForStorage) { " created="Tue, 14 Feb 2023 23:32:51 GMT">
									<outline text="saveFileToS3 (screenname, relpath, type, flprivate, filetext, callback);" created="Tue, 14 Feb 2023 23:33:19 GMT"/>
									<outline text="}" created="Tue, 14 Feb 2023 23:32:54 GMT"/>
									</outline>
								<outline text="else {" created="Wed, 20 Sep 2023 14:36:22 GMT">
									<outline text="var f = getFilePath (screenname, relpath, flprivate);"/>
									<outline text="utils.sureFilePath (f, function () {">
										<outline text="var now = new Date ();"/>
										<outline text="fs.writeFile (f, filetext, function (err) {">
											<outline text="if (err) {">
												<outline text="callback (err);"/>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="var url = (flprivate) ? undefined : config.urlServerForClient + screenname + &quot;/&quot; + relpath;"/>
												<outline text="if (config.publishFile !== undefined) { //3/18/22 by DW" created="Fri, 18 Mar 2022 14:17:52 GMT">
													<outline text="config.publishFile (f, screenname, relpath, type, flprivate, filetext, url);" created="Fri, 18 Mar 2022 14:18:30 GMT"/>
													<outline text="}" created="Fri, 18 Mar 2022 14:18:18 GMT"/>
													</outline>
												<outline text="if (!flprivate) {">
													<outline text="notifySocketSubscribers (&quot;update&quot;, filetext, true, function (conn) { //3/6/2 by DW -- payload is a string">
														<outline text="console.log (&quot;publishFile: conn.appData.urlToWatch == &quot; + conn.appData.urlToWatch + &quot;, url == &quot; + url); " isComment="true" created="Sat, 06 Mar 2021 20:19:09 GMT"/>
														<outline text="if (conn.appData.urlToWatch == url) {" created="Sat, 06 Mar 2021 20:25:13 GMT">
															<outline text="return (true);" created="Sat, 06 Mar 2021 20:25:20 GMT"/>
															<outline text="}" created="Sat, 06 Mar 2021 20:25:19 GMT"/>
															</outline>
														<outline text="else {" created="Sat, 06 Mar 2021 20:25:26 GMT">
															<outline text="return (false);" created="Sat, 06 Mar 2021 20:25:28 GMT"/>
															<outline text="}" created="Sat, 06 Mar 2021 20:25:31 GMT"/>
															</outline>
														<outline text="});" created="Sat, 06 Mar 2021 20:24:58 GMT"/>
														</outline>
													<outline text="}"/>
													</outline>
												<outline text="callback (undefined, {">
													<outline text="url,"/>
													<outline text="whenLastUpdate: now"/>
													<outline text="});"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}" created="Wed, 20 Sep 2023 14:36:24 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback ({message: &quot;Can't publish the file because the feature is not enabled on the server.&quot;});"/>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Wed, 20 Sep 2023 15:31:30 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getFile (screenname, relpath, flprivate, callback) {">
						<outline text="Changes" isComment="true">
							<outline text="9/20/23; 4:32:45 PM by DW" created="Wed, 20 Sep 2023 20:32:45 GMT">
								<outline text="We now let the containing application define static file publishing. I wanted this for FeedLand so it could store the files in an SQL table." created="Wed, 20 Sep 2023 20:32:45 GMT"/>
								<outline text="If we can't get the file from the callback, we try falling back to earlier methods, S3 or the local filesystem, this helps to migrate to a new storage system. " created="Wed, 20 Sep 2023 20:33:31 GMT"/>
								<outline text="When you save it, we'll store it in the system provided externally." created="Wed, 20 Sep 2023 20:36:43 GMT"/>
								</outline>
							<outline text="2/14/23; 5:54:52 PM by DW" created="Tue, 14 Feb 2023 22:54:51 GMT">
								<outline text="if config.flUseS3ForStorage is true, we save the file to a location on Amazon S3." created="Tue, 14 Feb 2023 22:54:52 GMT"/>
								</outline>
							<outline text="4/19/21; 9:44:22 AM by DW" created="Mon, 19 Apr 2021 13:44:22 GMT">
								<outline text="We now return file stats along with the file data." created="Mon, 19 Apr 2021 13:44:23 GMT"/>
								</outline>
							<outline text="7/28/15; 4:14:27 PM by DW">
								<outline text="Cribbed from storage.getObject in nodeStorage. "/>
								<outline text="On an error, if the code is ENOENT, we change it to the code that S3 would return, NoSuchKey. This is what the API is looking for, because in some circumstances this is not an error. For example the first time the app launches, and we're trying to get the user's appPrefs.json file. If it doesn't exist, we create one. "/>
								</outline>
							</outline>
						<outline text="function errcallback (err) {" created="Mon, 19 Apr 2021 13:38:45 GMT">
							<outline text="if (err.code == &quot;ENOENT&quot;) {">
								<outline text="err.status = 500;"/>
								<outline text="err.code = &quot;NoSuchKey&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="callback (err);"/>
							<outline text="}" created="Mon, 19 Apr 2021 13:38:50 GMT"/>
							</outline>
						<outline text="function getFromStaticFIlesystem () {" created="Wed, 20 Sep 2023 20:31:09 GMT">
							<outline text="if (config.flStorageEnabled) {" created="Wed, 20 Sep 2023 20:35:04 GMT">
								<outline text="if (config.flUseS3ForStorage) {" created="Tue, 14 Feb 2023 22:57:26 GMT">
									<outline text="getFileFromS3 (screenname, relpath, flprivate, callback);" created="Tue, 14 Feb 2023 22:57:42 GMT"/>
									<outline text="}" created="Tue, 14 Feb 2023 22:57:29 GMT"/>
									</outline>
								<outline text="else {" created="Wed, 20 Sep 2023 14:37:35 GMT">
									<outline text="var f = getFilePath (screenname, relpath, flprivate);"/>
									<outline text="fs.readFile (f, function (err, filetext) {">
										<outline text="if (err) {">
											<outline text="errcallback (err);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="fs.stat (f, function (err, stats) {" created="Mon, 19 Apr 2021 13:36:27 GMT">
												<outline text="if (err) {" created="Mon, 19 Apr 2021 13:36:49 GMT">
													<outline text="errcallback (err);"/>
													<outline text="}" created="Mon, 19 Apr 2021 13:36:52 GMT"/>
													</outline>
												<outline text="else {" created="Mon, 19 Apr 2021 13:36:59 GMT">
													<outline text="var data = {" created="Mon, 19 Apr 2021 13:39:52 GMT">
														<outline text="filedata: filetext.toString ()," created="Mon, 19 Apr 2021 13:40:09 GMT"/>
														<outline text="filestats: cleanFileStats (stats)" created="Mon, 19 Apr 2021 13:41:55 GMT"/>
														<outline text="};" created="Mon, 19 Apr 2021 13:40:00 GMT"/>
														</outline>
													<outline text="callback (undefined, data);"/>
													<outline text="}" created="Mon, 19 Apr 2021 13:37:02 GMT"/>
													</outline>
												<outline text="});" created="Mon, 19 Apr 2021 13:36:38 GMT"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}" created="Wed, 20 Sep 2023 14:37:37 GMT"/>
									</outline>
								<outline text="}" created="Wed, 20 Sep 2023 20:35:04 GMT"/>
								</outline>
							<outline text="else {">
								<outline text="callback ({message: &quot;Can't get the file because the feature is not enabled on the server.&quot;});"/>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Wed, 20 Sep 2023 20:31:27 GMT"/>
							</outline>
						<outline text="if (config.getStaticFile !== undefined) { //9/20/23 by DW" created="Wed, 20 Sep 2023 14:37:32 GMT">
							<outline text="config.getStaticFile (screenname, relpath, flprivate, function (err, data) {" created="Wed, 20 Sep 2023 14:36:43 GMT">
								<outline text="if (err) {" created="Wed, 20 Sep 2023 20:21:14 GMT">
									<outline text="console.log (&quot;getFile: err.message == &quot; + err.message);" isComment="true" created="Wed, 20 Sep 2023 20:22:04 GMT"/>
									<outline text="getFromStaticFIlesystem ();" created="Wed, 20 Sep 2023 20:32:03 GMT"/>
									<outline text="}" created="Wed, 20 Sep 2023 20:21:17 GMT"/>
									</outline>
								<outline text="else {" created="Wed, 20 Sep 2023 20:21:18 GMT">
									<outline text="callback (undefined, data);"/>
									<outline text="}" created="Wed, 20 Sep 2023 20:21:19 GMT"/>
									</outline>
								<outline text="});" created="Wed, 20 Sep 2023 20:21:06 GMT"/>
								</outline>
							<outline text="}" created="Wed, 20 Sep 2023 14:37:34 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 20 Sep 2023 15:30:41 GMT">
							<outline text="getFromStaticFIlesystem ();" created="Wed, 20 Sep 2023 20:32:03 GMT"/>
							<outline text="}" created="Wed, 20 Sep 2023 15:30:43 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getFileList (screenname, flprivate, callback) {">
						<outline text="var folder = getFilePath (screenname, &quot;&quot;, flprivate);"/>
						<outline text="filesystem.getFolderInfo (folder, function (theList) {">
							<outline text="var returnedList = new Array ();"/>
							<outline text="theList.forEach (function (item) {">
								<outline text="var fname = utils.stringLastField (item.f, &quot;/&quot;);"/>
								<outline text="if (fname != &quot;.DS_Store&quot;) {">
									<outline text="returnedList.push ({">
										<outline text="path: utils.stringDelete (item.f, 1, folder.length),"/>
										<outline text="whenLastChange: item.whenModified,"/>
										<outline text="whenCreated: item.whenCreated,"/>
										<outline text="ctChars: item.size"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="console.log (&quot;getFileList: folder == &quot; + folder + &quot;, returnedList == &quot; + utils.jsonStringify (returnedList));" isComment="true"/>
							<outline text="if (callback != undefined) {">
								<outline text="callback (undefined, returnedList);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="" created="Sat, 04 Dec 2021 18:53:56 GMT"/>
					<outline text="function getPublicFileUrl (screenname, relpath) { //12/4/21 by DW" created="Sat, 04 Dec 2021 18:53:56 GMT">
						<outline text="var urlpublic = config.urlServerForClient + screenname + &quot;/&quot; + relpath;"/>
						<outline text="return (urlpublic);" created="Sat, 04 Dec 2021 18:54:30 GMT"/>
						<outline text="}" created="Sat, 04 Dec 2021 18:54:09 GMT"/>
						</outline>
					<outline text="" created="Sat, 04 Dec 2021 18:53:57 GMT"/>
					<outline text="function makeFilePublic (screenname, relpath, callback) { //2/20/21 by DW" created="Sat, 20 Feb 2021 16:24:56 GMT">
						<outline text="Changes" isComment="true" created="Sat, 20 Feb 2021 16:23:04 GMT">
							<outline text="2/20/21; 11:23:07 AM by DW" created="Sat, 20 Feb 2021 16:23:06 GMT">
								<outline text="Implements the file.makeFilePublic verb. First we try to read the file as a public file, if it works, we return the public URL of the file. If it doesn't work, we try to read the private file, if it works, we save the file as a public file, deleting the original file if it worked. " created="Sat, 20 Feb 2021 16:23:07 GMT"/>
								</outline>
							</outline>
						<outline text="console.log (&quot;makeFilePublic: relpath == &quot; + relpath);" created="Sat, 20 Feb 2021 16:45:18 GMT"/>
						<outline text="getFile (screenname, relpath, false, function (err, data) {" created="Sat, 20 Feb 2021 16:26:12 GMT">
							<outline text="var urlpublic = config.urlServerForClient + screenname + &quot;/&quot; + relpath;"/>
							<outline text="if (err) { //public file doesn't exist, read the private file" created="Sat, 20 Feb 2021 16:26:53 GMT">
								<outline text="getFile (screenname, relpath, true, function (err, filetext) {" created="Sat, 20 Feb 2021 16:29:30 GMT">
									<outline text="if (err) { //file not there, can't make the file public" created="Sat, 20 Feb 2021 16:29:48 GMT">
										<outline text="var message = &quot;Can't make the file public because we can't read the private file.&quot;;" created="Sat, 20 Feb 2021 16:30:23 GMT"/>
										<outline text="console.log (&quot;makeFilePublic: err.message == &quot; + err.message);" created="Sat, 20 Feb 2021 16:30:06 GMT"/>
										<outline text="callback ({message});" created="Sat, 20 Feb 2021 16:30:06 GMT"/>
										<outline text="}" created="Sat, 20 Feb 2021 16:29:50 GMT"/>
										</outline>
									<outline text="else {" created="Sat, 20 Feb 2021 16:29:51 GMT">
										<outline text="publishFile (screenname, relpath, &quot;text/plain&quot;, false, filetext, function (err, data) {" created="Sat, 20 Feb 2021 16:31:05 GMT">
											<outline text="if (err) {" created="Sat, 20 Feb 2021 16:32:42 GMT">
												<outline text="var message = &quot;Can't make the file public because we can't write the new file.&quot;;" created="Sat, 20 Feb 2021 16:30:23 GMT"/>
												<outline text="callback ({message});" created="Sat, 20 Feb 2021 16:30:06 GMT"/>
												<outline text="}" created="Sat, 20 Feb 2021 16:32:45 GMT"/>
												</outline>
											<outline text="else {" created="Sat, 20 Feb 2021 16:32:45 GMT">
												<outline text="callback (undefined, {url: urlpublic});" created="Sat, 20 Feb 2021 16:27:13 GMT"/>
												<outline text="}" created="Sat, 20 Feb 2021 16:32:47 GMT"/>
												</outline>
											<outline text="});" created="Sat, 20 Feb 2021 16:32:36 GMT"/>
											</outline>
										<outline text="}" created="Sat, 20 Feb 2021 16:29:53 GMT"/>
										</outline>
									<outline text="});" created="Sat, 20 Feb 2021 16:29:38 GMT"/>
									</outline>
								<outline text="}" created="Sat, 20 Feb 2021 16:26:55 GMT"/>
								</outline>
							<outline text="else { //it exists, return the public url of the file" created="Sat, 20 Feb 2021 16:26:57 GMT">
								<outline text="callback (undefined, {url: urlpublic});" created="Sat, 20 Feb 2021 16:27:13 GMT"/>
								<outline text="}" created="Sat, 20 Feb 2021 16:26:58 GMT"/>
								</outline>
							<outline text="});" created="Sat, 20 Feb 2021 16:26:40 GMT"/>
							</outline>
						<outline text="}" created="Sat, 20 Feb 2021 16:25:23 GMT"/>
						</outline>
					<outline text="function getFileHierarchy (screenname, callback) { //2/21/21 by DW" created="Sun, 21 Feb 2021 20:42:39 GMT">
						<outline text="folderToJson.getObject (config.privateFilesPath + screenname + &quot;/&quot;, function (err, privateSubs) {" created="Sun, 21 Feb 2021 17:47:28 GMT">
							<outline text="if (err) {" created="Sun, 21 Feb 2021 17:47:46 GMT">
								<outline text="callback (err);" created="Sun, 21 Feb 2021 17:47:49 GMT"/>
								<outline text="}" created="Sun, 21 Feb 2021 17:47:52 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 21 Feb 2021 17:47:53 GMT">
								<outline text="folderToJson.getObject (config.publicFilesPath + screenname + &quot;/&quot;, function (err, publicSubs) {" created="Sun, 21 Feb 2021 17:47:28 GMT">
									<outline text="function legitError (err) {" created="Sat, 04 Dec 2021 19:16:17 GMT">
										<outline text="if (err) {" created="Sat, 04 Dec 2021 19:16:51 GMT">
											<outline text="if (err.code == &quot;ENOENT&quot;) {" created="Sat, 04 Dec 2021 19:17:08 GMT">
												<outline text="publicSubs = new Object ();" created="Sat, 04 Dec 2021 19:23:10 GMT"/>
												<outline text="return (false);" created="Sat, 04 Dec 2021 19:17:41 GMT"/>
												<outline text="}" created="Sat, 04 Dec 2021 19:17:22 GMT"/>
												</outline>
											<outline text="else {" created="Sat, 04 Dec 2021 19:19:21 GMT">
												<outline text="return (true);" created="Sat, 04 Dec 2021 19:18:52 GMT"/>
												<outline text="}" created="Sat, 04 Dec 2021 19:19:23 GMT"/>
												</outline>
											<outline text="}" created="Sat, 04 Dec 2021 19:17:28 GMT"/>
											</outline>
										<outline text="else {" created="Sat, 04 Dec 2021 19:17:36 GMT">
											<outline text="return (false);" created="Sat, 04 Dec 2021 19:17:41 GMT"/>
											<outline text="}" created="Sat, 04 Dec 2021 19:17:45 GMT"/>
											</outline>
										<outline text="}" created="Sat, 04 Dec 2021 19:16:26 GMT"/>
										</outline>
									<outline text="if (legitError (err)) {" created="Sun, 21 Feb 2021 17:47:46 GMT">
										<outline text="callback (err);" created="Sun, 21 Feb 2021 17:47:49 GMT"/>
										<outline text="}" created="Sun, 21 Feb 2021 17:47:52 GMT"/>
										</outline>
									<outline text="else {" created="Sun, 21 Feb 2021 17:47:53 GMT">
										<outline text="var theHierarchy = {" created="Mon, 22 Feb 2021 17:24:17 GMT">
											<outline text="publicFiles: {" created="Mon, 22 Feb 2021 17:24:37 GMT">
												<outline text="subs: publicSubs" created="Mon, 22 Feb 2021 17:24:45 GMT"/>
												<outline text="}," created="Mon, 22 Feb 2021 17:24:50 GMT"/>
												</outline>
											<outline text="privateFiles: {" created="Mon, 22 Feb 2021 17:24:38 GMT">
												<outline text="subs: privateSubs" created="Mon, 22 Feb 2021 17:24:56 GMT"/>
												<outline text="}" created="Mon, 22 Feb 2021 17:24:59 GMT"/>
												</outline>
											<outline text="};" created="Mon, 22 Feb 2021 17:24:27 GMT"/>
											</outline>
										<outline text="callback (undefined, theHierarchy);" created="Sun, 21 Feb 2021 17:47:55 GMT"/>
										<outline text="}" created="Sun, 21 Feb 2021 17:48:06 GMT"/>
										</outline>
									<outline text="});" created="Sun, 21 Feb 2021 17:47:37 GMT"/>
									</outline>
								<outline text="}" created="Sun, 21 Feb 2021 17:48:06 GMT"/>
								</outline>
							<outline text="});" created="Sun, 21 Feb 2021 17:47:37 GMT"/>
							</outline>
						<outline text="}" created="Sun, 21 Feb 2021 20:43:15 GMT"/>
						</outline>
					<outline text="function deleteFile (screenname, relpath, callback) { //2/23/21 by DW">
						<outline text="Changes" isComment="true" created="Tue, 23 Feb 2021 16:05:23 GMT">
							<outline text="2/23/21; 11:05:26 AM by DW" created="Tue, 23 Feb 2021 16:05:25 GMT">
								<outline text="We try to delete both the public and private versions. If neither succeeds we call it an error, otherwise it's cool." created="Tue, 23 Feb 2021 16:05:26 GMT"/>
								</outline>
							</outline>
						<outline text="if (config.flStorageEnabled) {">
							<outline text="function deleteone (flprivate, callback) {" created="Tue, 23 Feb 2021 16:01:47 GMT">
								<outline text="var f = getFilePath (screenname, relpath, flprivate);"/>
								<outline text="fs.unlink (f, callback);" created="Tue, 23 Feb 2021 16:02:15 GMT"/>
								<outline text="}" created="Tue, 23 Feb 2021 16:01:58 GMT"/>
								</outline>
							<outline text="deleteone (true, function (errPrivate) {" created="Tue, 23 Feb 2021 15:59:48 GMT">
								<outline text="deleteone (false, function (errPublic) {" created="Tue, 23 Feb 2021 16:00:34 GMT">
									<outline text="if (errPrivate &amp;&amp; errPublic) {" created="Tue, 23 Feb 2021 16:03:50 GMT">
										<outline text="callback ({message: &quot;Can't delete the file because it doesn't exist.&quot;});" created="Tue, 23 Feb 2021 16:04:11 GMT"/>
										<outline text="}" created="Tue, 23 Feb 2021 16:03:58 GMT"/>
										</outline>
									<outline text="else {" created="Tue, 23 Feb 2021 16:04:43 GMT">
										<outline text="callback (undefined);" created="Tue, 23 Feb 2021 16:04:46 GMT"/>
										<outline text="}" created="Tue, 23 Feb 2021 16:04:50 GMT"/>
										</outline>
									<outline text="});" created="Tue, 23 Feb 2021 16:03:45 GMT"/>
									</outline>
								<outline text="});" created="Tue, 23 Feb 2021 16:00:06 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback ({message: &quot;Can't delete the file because the feature is not enabled on the server.&quot;});"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function fileExists (screenname, relpath, callback) { //5/29/21 by DW" created="Wed, 24 Feb 2021 20:18:01 GMT">
						<outline text="Changes" isComment="true" created="Sat, 29 May 2021 15:24:47 GMT">
							<outline text="5/29/21; 11:24:51 AM by DW" created="Sat, 29 May 2021 15:24:49 GMT">
								<outline text="Read the file, if no error, file exists. " created="Sat, 29 May 2021 15:24:51 GMT"/>
								</outline>
							</outline>
						<outline text="readWholeFile (screenname, relpath, function (err, data) {" created="Sat, 29 May 2021 15:23:16 GMT">
							<outline text="var flExists = err === undefined;" created="Sat, 29 May 2021 15:33:57 GMT"/>
							<outline text="callback (undefined, {flExists});" created="Sat, 29 May 2021 15:24:03 GMT"/>
							<outline text="});" created="Sat, 29 May 2021 15:23:38 GMT"/>
							</outline>
						<outline text="}" created="Wed, 24 Feb 2021 20:18:17 GMT"/>
						</outline>
					<outline text="function readWholeFile (screenname, relpath, callback) { //2/24/21 by DW" created="Wed, 24 Feb 2021 20:18:01 GMT">
						<outline text="Changes" isComment="true" created="Wed, 24 Feb 2021 20:24:55 GMT">
							<outline text="2/24/21; 3:24:58 PM by DW" created="Wed, 24 Feb 2021 20:24:57 GMT">
								<outline text="First we try to read the public version, if it exists we return the text of the file. Otherwise we read the private version, if that fails we return an error." created="Wed, 24 Feb 2021 20:24:58 GMT"/>
								<outline text="This was written as the backend for the file.readWholeFile scripting verb. " created="Wed, 24 Feb 2021 20:26:00 GMT"/>
								</outline>
							</outline>
						<outline text="if (config.flStorageEnabled) {">
							<outline text="function readone (flprivate, callback) {" created="Tue, 23 Feb 2021 16:01:47 GMT">
								<outline text="var f = getFilePath (screenname, relpath, flprivate);"/>
								<outline text="fs.readFile (f, function (err, filetext) {" created="Tue, 23 Feb 2021 16:02:15 GMT">
									<outline text="if (err) {" created="Wed, 24 Feb 2021 20:23:25 GMT">
										<outline text="callback (err);" created="Wed, 24 Feb 2021 20:23:27 GMT"/>
										<outline text="}" created="Wed, 24 Feb 2021 20:23:31 GMT"/>
										</outline>
									<outline text="else {" created="Wed, 24 Feb 2021 20:23:31 GMT">
										<outline text="filetext = filetext.toString (); //it's a buffer" created="Wed, 24 Feb 2021 20:41:38 GMT"/>
										<outline text="callback (undefined, {filetext});" created="Wed, 24 Feb 2021 20:23:33 GMT"/>
										<outline text="}" created="Wed, 24 Feb 2021 20:23:41 GMT"/>
										</outline>
									<outline text="});" created="Wed, 24 Feb 2021 20:23:20 GMT"/>
									</outline>
								<outline text="}" created="Tue, 23 Feb 2021 16:01:58 GMT"/>
								</outline>
							<outline text="readone (false, function (err, fileinfo) { //look for public version first" created="Tue, 23 Feb 2021 15:59:48 GMT">
								<outline text="if (err) {" created="Wed, 24 Feb 2021 20:20:27 GMT">
									<outline text="readone (true, function (err, fileinfo) { //look for private version" created="Tue, 23 Feb 2021 16:00:34 GMT">
										<outline text="if (err) {" created="Tue, 23 Feb 2021 16:03:50 GMT">
											<outline text="callback ({message: &quot;Can't read the file because it doesn't exist.&quot;});" created="Tue, 23 Feb 2021 16:04:11 GMT"/>
											<outline text="}" created="Tue, 23 Feb 2021 16:03:58 GMT"/>
											</outline>
										<outline text="else {" created="Tue, 23 Feb 2021 16:04:43 GMT">
											<outline text="callback (undefined, fileinfo);" created="Tue, 23 Feb 2021 16:04:46 GMT"/>
											<outline text="}" created="Tue, 23 Feb 2021 16:04:50 GMT"/>
											</outline>
										<outline text="});" created="Tue, 23 Feb 2021 16:03:45 GMT"/>
										</outline>
									<outline text="}" created="Wed, 24 Feb 2021 20:20:37 GMT"/>
									</outline>
								<outline text="else {" created="Wed, 24 Feb 2021 20:20:38 GMT">
									<outline text="callback (undefined, fileinfo);" created="Tue, 23 Feb 2021 16:04:46 GMT"/>
									<outline text="}" created="Wed, 24 Feb 2021 20:20:42 GMT"/>
									</outline>
								<outline text="});" created="Tue, 23 Feb 2021 16:00:06 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback ({message: &quot;Can't read the file because the feature is not enabled on the server.&quot;});"/>
							<outline text="}"/>
							</outline>
						<outline text="}" created="Wed, 24 Feb 2021 20:18:17 GMT"/>
						</outline>
					<outline text="function storageMustBeEnabled (namefunction, httpReturn, callback) {" created="Thu, 25 Feb 2021 17:34:14 GMT">
						<outline text="if (config.flStorageEnabled) {" created="Thu, 25 Feb 2021 17:34:41 GMT">
							<outline text="callback ();" created="Thu, 25 Feb 2021 17:35:00 GMT"/>
							<outline text="}" created="Thu, 25 Feb 2021 17:34:52 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 25 Feb 2021 17:35:03 GMT">
							<outline text="httpReturn ({message: &quot;Can't &quot; + namefunction + &quot; the file because the feature is not enabled on the server.&quot;});"/>
							<outline text="}" created="Thu, 25 Feb 2021 17:35:06 GMT"/>
							</outline>
						<outline text="}" created="Thu, 25 Feb 2021 17:34:31 GMT"/>
						</outline>
					<outline text="function writeWholeFile (screenname, relpath, filetext, callback) {" created="Thu, 25 Feb 2021 17:31:37 GMT">
						<outline text="Changes" isComment="true" created="Thu, 25 Feb 2021 17:32:22 GMT">
							<outline text="7/3/22; 11:51:04 AM by DW" created="Sun, 03 Jul 2022 15:51:03 GMT">
								<outline text="When calling type, the value type wasn't defined, so we defined it. " created="Sun, 03 Jul 2022 15:51:04 GMT"/>
								</outline>
							<outline text="9/15/21; 10:04:46 AM by DW" created="Wed, 15 Sep 2021 14:04:46 GMT">
								<outline text="Before writing the file make sure the folder path to the file exists. " created="Wed, 15 Sep 2021 14:04:46 GMT"/>
								</outline>
							<outline text="2/25/21; 12:32:24 PM by DW" created="Thu, 25 Feb 2021 17:32:23 GMT">
								<outline text="If the file doesn't exist, we create a private file."/>
								<outline text="If it does exist, we replace the first one we find."/>
								<outline text="We start looking for the public file, then the private one. "/>
								</outline>
							</outline>
						<outline text="storageMustBeEnabled (&quot;write&quot;, callback, function () {" created="Thu, 25 Feb 2021 17:33:40 GMT">
							<outline text="function readone (flprivate, callback) {" created="Tue, 23 Feb 2021 16:01:47 GMT">
								<outline text="var f = getFilePath (screenname, relpath, flprivate);"/>
								<outline text="fs.readFile (f, function (err, filetext) {" created="Tue, 23 Feb 2021 16:02:15 GMT">
									<outline text="if (err) {" created="Wed, 24 Feb 2021 20:23:25 GMT">
										<outline text="callback (err);" created="Wed, 24 Feb 2021 20:23:27 GMT"/>
										<outline text="}" created="Wed, 24 Feb 2021 20:23:31 GMT"/>
										</outline>
									<outline text="else {" created="Wed, 24 Feb 2021 20:23:31 GMT">
										<outline text="filetext = filetext.toString (); //it's a buffer" created="Wed, 24 Feb 2021 20:41:38 GMT"/>
										<outline text="callback (undefined, {filetext});" created="Wed, 24 Feb 2021 20:23:33 GMT"/>
										<outline text="}" created="Wed, 24 Feb 2021 20:23:41 GMT"/>
										</outline>
									<outline text="});" created="Wed, 24 Feb 2021 20:23:20 GMT"/>
									</outline>
								<outline text="}" created="Tue, 23 Feb 2021 16:01:58 GMT"/>
								</outline>
							<outline text="function writethefile (flprivate) {" created="Thu, 25 Feb 2021 17:38:57 GMT">
								<outline text="var f = getFilePath (screenname, relpath, flprivate);"/>
								<outline text="utils.sureFilePath (f, function () { //9/15/21 by DW" created="Wed, 15 Sep 2021 14:03:42 GMT">
									<outline text="fs.writeFile (f, filetext, function (err) {" created="Thu, 25 Feb 2021 17:39:25 GMT">
										<outline text="if (err) {" created="Thu, 25 Feb 2021 17:40:20 GMT">
											<outline text="callback (err);" created="Thu, 25 Feb 2021 17:40:23 GMT"/>
											<outline text="}" created="Thu, 25 Feb 2021 17:40:28 GMT"/>
											</outline>
										<outline text="else {" created="Thu, 25 Feb 2021 17:40:29 GMT">
											<outline text="if (config.publishFile !== undefined) { //3/18/22 by DW" created="Fri, 18 Mar 2022 14:17:52 GMT">
												<outline text="const url = (flprivate) ? undefined : config.urlServerForClient + screenname + &quot;/&quot; + relpath;"/>
												<outline text="const type = utils.httpExt2MIME (utils.stringLastField (f, &quot;.&quot;)); //7/3/22 by DW" created="Sun, 03 Jul 2022 15:48:05 GMT"/>
												<outline text="config.publishFile (f, screenname, relpath, type, flprivate, filetext, url);" created="Fri, 18 Mar 2022 14:18:30 GMT"/>
												<outline text="}" created="Fri, 18 Mar 2022 14:18:18 GMT"/>
												</outline>
											<outline text="callback (undefined);" created="Thu, 25 Feb 2021 17:40:31 GMT"/>
											<outline text="}" created="Thu, 25 Feb 2021 17:48:22 GMT"/>
											</outline>
										<outline text="});" created="Thu, 25 Feb 2021 17:40:00 GMT"/>
										</outline>
									<outline text="});" created="Wed, 15 Sep 2021 14:04:05 GMT"/>
									</outline>
								<outline text="}" created="Thu, 25 Feb 2021 17:39:04 GMT"/>
								</outline>
							<outline text="readone (false, function (err, data) {" created="Thu, 25 Feb 2021 17:36:35 GMT">
								<outline text="if (err) { //write a private file" created="Thu, 25 Feb 2021 17:37:16 GMT">
									<outline text="writethefile (true);" created="Thu, 25 Feb 2021 17:37:33 GMT"/>
									<outline text="}" created="Thu, 25 Feb 2021 17:37:24 GMT"/>
									</outline>
								<outline text="else { //public version exists" created="Thu, 25 Feb 2021 17:37:25 GMT">
									<outline text="writethefile (false);" created="Thu, 25 Feb 2021 17:37:33 GMT"/>
									<outline text="}" created="Thu, 25 Feb 2021 17:37:28 GMT"/>
									</outline>
								<outline text="});" created="Thu, 25 Feb 2021 17:37:04 GMT"/>
								</outline>
							<outline text="});" created="Thu, 25 Feb 2021 17:34:07 GMT"/>
							</outline>
						<outline text="}" created="Thu, 25 Feb 2021 17:32:00 GMT"/>
						</outline>
					<outline text="function getPublicUrl (screenname, relpath) { //8/24/21 by DW" created="Tue, 24 Aug 2021 14:27:52 GMT">
						<outline text="return (config.urlServerForClient + screenname + &quot;/&quot; + relpath);"/>
						<outline text="}" created="Tue, 24 Aug 2021 14:28:05 GMT"/>
						</outline>
					<outline text="function getFileInfo (screenname, relpath, callback) { //4/1/21 by DW" created="Thu, 01 Apr 2021 14:14:47 GMT">
						<outline text="Changes" isComment="true" created="Tue, 24 Aug 2021 14:24:28 GMT">
							<outline text="8/24/21; 10:24:30 AM by DW" created="Tue, 24 Aug 2021 14:24:29 GMT">
								<outline text="If the file is public return the address of the file." created="Tue, 24 Aug 2021 14:24:31 GMT"/>
								</outline>
							</outline>
						<outline text="if (config.flStorageEnabled) {">
							<outline text="findFile (screenname, relpath, function (err, stats) {" created="Thu, 01 Apr 2021 14:23:00 GMT">
								<outline text="if (err) {" created="Thu, 01 Apr 2021 14:23:27 GMT">
									<outline text="callback (err);" created="Thu, 01 Apr 2021 14:23:30 GMT"/>
									<outline text="}" created="Thu, 01 Apr 2021 14:23:34 GMT"/>
									</outline>
								<outline text="else {" created="Thu, 01 Apr 2021 14:23:34 GMT">
									<outline text="function formatDate (d) {" created="Thu, 01 Apr 2021 14:36:30 GMT">
										<outline text="return (new Date (d).toUTCString ());" created="Thu, 01 Apr 2021 14:36:38 GMT"/>
										<outline text="}" created="Thu, 01 Apr 2021 14:36:51 GMT"/>
										</outline>
									<outline text="callback (undefined, {" created="Thu, 01 Apr 2021 14:23:59 GMT">
										<outline text="size: stats.size, //number of bytes in file"/>
										<outline text="whenAccessed: formatDate (stats.atime), //when last red"/>
										<outline text="whenCreated: formatDate (stats.birthtime)," created="Sun, 21 Feb 2021 21:39:45 GMT"/>
										<outline text="whenModified: formatDate (stats.mtime)," created="Sun, 21 Feb 2021 21:39:01 GMT"/>
										<outline text="flPrivate: stats.flPrivate," created="Thu, 01 Apr 2021 14:32:14 GMT"/>
										<outline text="urlPublic: (stats.flPrivate) ? undefined : getPublicUrl (screenname, relpath) //8/24/21 by DW" created="Tue, 24 Aug 2021 14:25:27 GMT"/>
										<outline text="});" created="Thu, 01 Apr 2021 14:24:04 GMT"/>
										</outline>
									<outline text="}" created="Thu, 01 Apr 2021 14:23:36 GMT"/>
									</outline>
								<outline text="});" created="Thu, 01 Apr 2021 14:23:22 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback ({message: &quot;Can't read the file because the feature is not enabled on the server.&quot;});"/>
							<outline text="}"/>
							</outline>
						<outline text="}" created="Thu, 01 Apr 2021 14:15:03 GMT"/>
						</outline>
					<outline text="function getUserData (screenname, callback) { //4/14/20 by DW">
						<outline text="storageMustBeEnabled (&quot;get user data&quot;, callback, function () {" created="Thu, 25 Feb 2021 17:33:40 GMT">
							<outline text="const tmpfolder = &quot;tmp/&quot;, archivefile = tmpfolder + screenname + &quot;.zip&quot;; "/>
							<outline text="utils.sureFilePath (archivefile, function () {">
								<outline text="var theArchive = zip.createArchive (archivefile, function (err, data) {">
									<outline text="if (callback !== undefined) {">
										<outline text="callback (err, archivefile);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="var pathPublicFiles = getFilePath (screenname, &quot;&quot;, false);"/>
								<outline text="var pathPrivateFiles = getFilePath (screenname, &quot;&quot;, true);"/>
								<outline text="var pathPublicFiles = s3Path + &quot;users/&quot; + screenName + &quot;/&quot;;" isComment="true"/>
								<outline text="var pathPrivateFiles = s3PrivatePath + &quot;users/&quot; + screenName + &quot;/&quot;;" isComment="true"/>
								<outline text="console.log (&quot;archiveUser: pathPublicFiles == &quot; + pathPublicFiles);" isComment="true"/>
								<outline text="theArchive.addDirectoryToArchive (pathPublicFiles, &quot;Public Files&quot;);"/>
								<outline text="theArchive.addDirectoryToArchive (pathPrivateFiles, &quot;Private Files&quot;);"/>
								<outline text="theArchive.finalize ();"/>
								<outline text="});"/>
								</outline>
							<outline text="});" created="Thu, 25 Feb 2021 17:34:07 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="" isComment="true" created="Sun, 04 Apr 2021 17:18:49 GMT"/>
					<outline text="function getOptionalPublicOrPrivateFile (screenname, relpath, callback) { //4/4/21 by DW" isComment="true" created="Sun, 04 Apr 2021 17:18:50 GMT">
						<outline text="if (config.flStorageEnabled) {">
							<outline text="function readone (flprivate, callback) {" created="Tue, 23 Feb 2021 16:01:47 GMT">
								<outline text="var f = getFilePath (screenname, relpath, flprivate);"/>
								<outline text="fs.readFile (f, function (err, filetext) {" created="Tue, 23 Feb 2021 16:02:15 GMT">
									<outline text="if (err) {" created="Wed, 24 Feb 2021 20:23:25 GMT">
										<outline text="callback (err);" created="Wed, 24 Feb 2021 20:23:27 GMT"/>
										<outline text="}" created="Wed, 24 Feb 2021 20:23:31 GMT"/>
										</outline>
									<outline text="else {" created="Wed, 24 Feb 2021 20:23:31 GMT">
										<outline text="filetext = filetext.toString (); //it's a buffer" created="Wed, 24 Feb 2021 20:41:38 GMT"/>
										<outline text="callback (undefined, {filetext});" created="Wed, 24 Feb 2021 20:23:33 GMT"/>
										<outline text="}" created="Wed, 24 Feb 2021 20:23:41 GMT"/>
										</outline>
									<outline text="});" created="Wed, 24 Feb 2021 20:23:20 GMT"/>
									</outline>
								<outline text="}" created="Tue, 23 Feb 2021 16:01:58 GMT"/>
								</outline>
							<outline text="readone (false, function (err, fileinfo) { //look for public version first" created="Tue, 23 Feb 2021 15:59:48 GMT">
								<outline text="if (err) {" created="Wed, 24 Feb 2021 20:20:27 GMT">
									<outline text="readone (true, function (err, fileinfo) { //look for private version" created="Tue, 23 Feb 2021 16:00:34 GMT">
										<outline text="if (err) {" created="Tue, 23 Feb 2021 16:03:50 GMT">
											<outline text="callback ({message: &quot;Can't read the file because it doesn't exist.&quot;});" created="Tue, 23 Feb 2021 16:04:11 GMT"/>
											<outline text="}" created="Tue, 23 Feb 2021 16:03:58 GMT"/>
											</outline>
										<outline text="else {" created="Tue, 23 Feb 2021 16:04:43 GMT">
											<outline text="callback (undefined, fileinfo);" created="Tue, 23 Feb 2021 16:04:46 GMT"/>
											<outline text="}" created="Tue, 23 Feb 2021 16:04:50 GMT"/>
											</outline>
										<outline text="});" created="Tue, 23 Feb 2021 16:03:45 GMT"/>
										</outline>
									<outline text="}" created="Wed, 24 Feb 2021 20:20:37 GMT"/>
									</outline>
								<outline text="else {" created="Wed, 24 Feb 2021 20:20:38 GMT">
									<outline text="callback (undefined, fileinfo);" created="Tue, 23 Feb 2021 16:04:46 GMT"/>
									<outline text="}" created="Wed, 24 Feb 2021 20:20:42 GMT"/>
									</outline>
								<outline text="});" created="Tue, 23 Feb 2021 16:00:06 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback ({message: &quot;Can't read the file because the feature is not enabled on the server.&quot;});"/>
							<outline text="}"/>
							</outline>
						<outline text="}" created="Sun, 04 Apr 2021 17:19:08 GMT"/>
						</outline>
					</outline>
				<outline text="//github -- 11/8/21 by DW" created="Mon, 08 Nov 2021 21:45:09 GMT">
					<outline text="function handleGithubOauthCallback (theCode, callback) { //11/8/21 by DW">
						<outline text="Changes" isComment="true" created="Mon, 08 Nov 2021 17:18:01 GMT">
							<outline text="11/8/21; 12:18:03 PM by DW" created="Mon, 08 Nov 2021 17:18:02 GMT">
								<outline text="Cribbed from githubpub." created="Mon, 08 Nov 2021 17:18:03 GMT"/>
								</outline>
							</outline>
						<outline text="var params = {">
							<outline text="client_id: config.githubClientId,"/>
							<outline text="client_secret: config.githubClientSecret,"/>
							<outline text="code: theCode"/>
							<outline text="};"/>
							</outline>
						<outline text="var apiUrl = &quot;https://github.com/login/oauth/access_token?&quot; + utils.buildParamList (params);"/>
						<outline text="var githubRequest = {">
							<outline text="method: &quot;POST&quot;,"/>
							<outline text="url: apiUrl"/>
							<outline text="followRedirect: true, " isComment="true"/>
							<outline text="headers: {Accept: &quot;application/json&quot;}" isComment="true"/>
							<outline text="};"/>
							</outline>
						<outline text="console.log (&quot;handleGithubOauthCallback: githubRequest === &quot; + utils.jsonStringify (githubRequest));"/>
						<outline text="request (githubRequest, function (err, response, body) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;handleGithubOauthCallback: err.message == &quot; + err.message);"/>
								<outline text="callback (err);" created="Mon, 08 Nov 2021 17:33:37 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var postbody = qs.parse (body);"/>
								<outline text="var urlRedirect = &quot;/?githubaccesstoken=&quot; + postbody.access_token;"/>
								<outline text="console.log (&quot;handleGithubOauthCallback: urlRedirect = &quot; + urlRedirect);"/>
								<outline text="callback (undefined, urlRedirect);" created="Mon, 08 Nov 2021 17:38:59 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function downloadFromGithub (username, repository, path, accessToken, callback) { //calls back with the JSON structure GitHub returns">
						<outline text="Changes" isComment="true">
							<outline text="11/8/21; 4:45:52 PM by DW" created="Mon, 08 Nov 2021 21:45:52 GMT">
								<outline text="Cribbed from githubpub." created="Mon, 08 Nov 2021 21:45:53 GMT"/>
								</outline>
							<outline text="12/13/19; 11:09:44 AM by DW">
								<outline text="New option, flCanUseCache. "/>
								</outline>
							<outline text="10/29/18; 10:48:35 AM by DW">
								<outline text="New optional param, options, which contains accessToken to begin."/>
								</outline>
							</outline>
						<outline text="if (!utils.beginsWith (path, &quot;/&quot;)) {">
							<outline text="path = &quot;/&quot; + path;"/>
							<outline text="}"/>
							</outline>
						<outline text="var url = &quot;https://api.github.com/repos/&quot; + username + &quot;/&quot; + repository + &quot;/contents&quot; + path;"/>
						<outline text="url += &quot;?client_id=&quot; + config.githubClientId + &quot;&amp;client_secret=&quot; + config.githubClientSecret;" isComment="true"/>
						<outline text="var theRequest = {">
							<outline text="url: url,"/>
							<outline text="jar: true, //&quot;remember cookies for future use&quot;"/>
							<outline text="maxRedirects: 5,"/>
							<outline text="headers: {">
								<outline text="&quot;User-Agent&quot;: config.userAgent,"/>
								<outline text="&quot;Authorization&quot;: &quot;token &quot; + accessToken"/>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="request (theRequest, function (err, response, jsontext) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (response.statusCode == 404) {">
									<outline text="callback ({message: &quot;The file \&quot;&quot; + path + &quot;\&quot; was not found.&quot;});"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="console.log (&quot;downloadFromGithub: response.headers == &quot; + utils.jsonStringify (response.headers))" isComment="true"/>
									<outline text="if (response.headers [&quot;x-ratelimit-remaining&quot;] == 0) {">
										<outline text="var theLimit = response.headers [&quot;x-ratelimit-limit&quot;];"/>
										<outline text="callback ({&quot;message&quot;: &quot;GitHub reported a rate limit error. You are limited to &quot; + theLimit + &quot; calls per hour.&quot;});"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="try {">
											<outline text="var jstruct = JSON.parse (jsontext);"/>
											<outline text="callback (undefined, jstruct);"/>
											<outline text="}"/>
											</outline>
										<outline text="catch (err) {">
											<outline text="callback (err);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function uploadToGithub (jsontext, data, callback) {">
						<outline text="Changes" isComment="true">
							<outline text="11/9/21; 3:30:18 PM by DW">
								<outline text="jsontext is the serialized options struct. " created="Tue, 09 Nov 2021 20:37:27 GMT"/>
								<outline text="required elements">
									<outline text="username, repository, path, data, type, accessToken -- required" created="Tue, 09 Nov 2021 20:22:50 GMT"/>
									</outline>
								<outline text="optional elements" created="Tue, 09 Nov 2021 20:37:48 GMT">
									<outline text="type -- optional, the mime type for the data, if not provided we infer it from the extension" created="Tue, 09 Nov 2021 20:40:35 GMT"/>
									<outline text="message -- optional, the checkin message"/>
									<outline text="committer -- optional, a struct with name and email of the committer"/>
									<outline text="userAgent -- optional"/>
									</outline>
								</outline>
							</outline>
						<outline text="var options;" created="Tue, 09 Nov 2021 20:35:15 GMT"/>
						<outline text="try {" created="Tue, 09 Nov 2021 20:35:16 GMT">
							<outline text="options = JSON.parse (jsontext);" created="Tue, 09 Nov 2021 20:35:35 GMT"/>
							<outline text="}" created="Tue, 09 Nov 2021 20:35:20 GMT"/>
							</outline>
						<outline text="catch (err) {" created="Tue, 09 Nov 2021 20:35:21 GMT">
							<outline text="callback (err);" created="Tue, 09 Nov 2021 20:35:52 GMT"/>
							<outline text="return;" created="Tue, 09 Nov 2021 20:35:56 GMT"/>
							<outline text="}" created="Tue, 09 Nov 2021 20:35:24 GMT"/>
							</outline>
						<outline text="options.data = data;" created="Tue, 09 Nov 2021 20:35:16 GMT"/>
						<outline text="if (options.userAgent === undefined) {" created="Tue, 09 Nov 2021 20:38:29 GMT">
							<outline text="options.userAgent = config.userAgent;" created="Tue, 09 Nov 2021 20:38:50 GMT"/>
							<outline text="}" created="Tue, 09 Nov 2021 20:38:46 GMT"/>
							</outline>
						<outline text="if (options.type === undefined) {" created="Tue, 09 Nov 2021 20:38:29 GMT">
							<outline text="options.type = utils.httpExt2MIME (options.path);" created="Tue, 09 Nov 2021 20:38:50 GMT"/>
							<outline text="}" created="Tue, 09 Nov 2021 20:38:46 GMT"/>
							</outline>
						<outline text="if (options.message === undefined) {" created="Tue, 09 Nov 2021 20:38:29 GMT">
							<outline text="options.message = utils.getRandomSnarkySlogan ();" created="Tue, 09 Nov 2021 20:38:50 GMT"/>
							<outline text="}" created="Tue, 09 Nov 2021 20:38:46 GMT"/>
							</outline>
						<outline text="" created="Tue, 09 Nov 2021 20:35:16 GMT"/>
						<outline text="var bodyStruct = { ">
							<outline text="message: options.message,"/>
							<outline text="committer: options.committer,"/>
							<outline text="content: Buffer.from (options.data).toString (&quot;base64&quot;)"/>
							<outline text="};"/>
							</outline>
						<outline text="downloadFromGithub (options.username, options.repository, options.path, options.accessToken, function (err, jstruct) {" created="Tue, 09 Nov 2021 20:24:45 GMT">
							<outline text="if (jstruct !== undefined) {">
								<outline text="bodyStruct.sha = jstruct.sha;"/>
								<outline text="}"/>
								</outline>
							<outline text="var url = &quot;https://api.github.com/repos/&quot; + options.username + &quot;/&quot; + options.repository + &quot;/contents/&quot; + options.path;"/>
							<outline text="var theRequest = {">
								<outline text="method: &quot;PUT&quot;,"/>
								<outline text="url,"/>
								<outline text="body: JSON.stringify (bodyStruct),"/>
								<outline text="auth: {" isComment="true">
									<outline text="user: options.username,"/>
									<outline text="pass: options.password,"/>
									<outline text="sendImmediately: true"/>
									<outline text="},"/>
									</outline>
								<outline text="headers: {">
									<outline text="&quot;User-Agent&quot;: options.userAgent,"/>
									<outline text="&quot;Authorization&quot;: &quot;token &quot; + options.accessToken,"/>
									<outline text="&quot;Content-Type&quot;: options.type"/>
									<outline text="}"/>
									</outline>
								<outline text="};"/>
								</outline>
							<outline text="request (theRequest, function (err, response, body) { ">
								<outline text="if (err) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="var rateLimitMessage;" created="Tue, 09 Nov 2021 20:51:46 GMT"/>
									<outline text="if (response.headers [&quot;x-ratelimit-remaining&quot;] == 0) {">
										<outline text="var theLimit = response.headers [&quot;x-ratelimit-limit&quot;];"/>
										<outline text="rateLimitMessage = &quot;GitHub reported a rate limit error. You are limited to &quot; + theLimit + &quot; calls per hour.&quot;;"/>
										<outline text="}"/>
										</outline>
									<outline text="var returnedStruct = JSON.parse (body);" created="Tue, 09 Nov 2021 21:05:25 GMT"/>
									<outline text="returnedStruct.statusCode = response.statusCode;" created="Tue, 09 Nov 2021 21:05:25 GMT"/>
									<outline text="returnedStruct.rateLimitMessage = rateLimitMessage;" created="Tue, 09 Nov 2021 21:05:25 GMT"/>
									<outline text="callback (undefined, returnedStruct);" created="Tue, 09 Nov 2021 20:50:17 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});" created="Tue, 09 Nov 2021 20:25:41 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getGithubDirectory (username, repository, path, accessToken, callback) {">
						<outline text="Changes" isComment="true" created="Tue, 04 May 2021 15:18:57 GMT">
							<outline text="5/4/21; 11:19:00 AM by DW" created="Tue, 04 May 2021 15:18:59 GMT">
								<outline text="Added to package from repocontents test app." created="Tue, 04 May 2021 15:19:01 GMT"/>
								</outline>
							</outline>
						<outline text="function loadDirectory (theArray, parentpath, callback) {">
							<outline text="function nextFile (ix) {">
								<outline text="if (ix &lt; theArray.length) {">
									<outline text="var item = theArray [ix];"/>
									<outline text="if (item.type == &quot;dir&quot;) {">
										<outline text="getGithubDirectory (username, repository, item.path, accessToken, function (err, jstruct) {">
											<outline text="if (jstruct !== undefined) { //no error">
												<outline text="item.subs = jstruct;"/>
												<outline text="}"/>
												</outline>
											<outline text="nextFile (ix + 1);"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="nextFile (ix + 1);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="nextFile (0);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (utils.beginsWith (path, &quot;/&quot;)) {">
							<outline text="path = utils.stringDelete (path, 1, 1);"/>
							<outline text="}"/>
							</outline>
						<outline text="var theRequest = {">
							<outline text="method: &quot;GET&quot;,"/>
							<outline text="url: &quot;https://api.github.com/repos/&quot; + username + &quot;/&quot; + repository + &quot;/contents/&quot; + path,"/>
							<outline text="headers: {">
								<outline text="&quot;User-Agent&quot;: config.userAgent,"/>
								<outline text="&quot;Authorization&quot;: &quot;token &quot; + accessToken,"/>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="request (theRequest, function (err, response, body) { ">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (body);"/>
									<outline text="if (Array.isArray (jstruct)) { //it's a directory">
										<outline text="loadDirectory (jstruct, path, function () {">
											<outline text="callback (undefined, jstruct);"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="callback (undefined, jstruct);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="if (callback !== undefined) {">
										<outline text="callback (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getGithubUserInfo (username, accessToken, callback) {">
						<outline text="var url = &quot;https://api.github.com/user&quot;;" created="Tue, 09 Nov 2021 18:16:50 GMT"/>
						<outline text="if (username !== undefined) {" created="Tue, 09 Nov 2021 18:16:21 GMT">
							<outline text="url += &quot;s/&quot; + username" created="Tue, 09 Nov 2021 18:16:37 GMT"/>
							<outline text="}" created="Tue, 09 Nov 2021 18:16:26 GMT"/>
							</outline>
						<outline text="var theRequest = {">
							<outline text="method: &quot;GET&quot;,"/>
							<outline text="url,"/>
							<outline text="headers: {">
								<outline text="&quot;User-Agent&quot;: config.userAgent,"/>
								<outline text="&quot;Authorization&quot;: &quot;token &quot; + accessToken"/>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="request (theRequest, function (err, response, body) { ">
							<outline text="if (err) {" created="Wed, 10 Nov 2021 17:00:36 GMT">
								<outline text="callback (err);" created="Wed, 10 Nov 2021 17:00:40 GMT"/>
								<outline text="}" created="Wed, 10 Nov 2021 17:00:44 GMT"/>
								</outline>
							<outline text="else {" created="Wed, 10 Nov 2021 17:00:45 GMT">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (body);"/>
									<outline text="callback (undefined, jstruct);" created="Wed, 10 Nov 2021 17:01:11 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="callback (err);" created="Wed, 10 Nov 2021 17:00:40 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="}" created="Wed, 10 Nov 2021 17:00:47 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//email registration -- 12/7/22 by DW" created="Wed, 07 Dec 2022 18:58:25 GMT">
					<outline text="function addPendingConfirmation (theConfirmation, callback) { //8/14/23 by DW" created="Mon, 14 Aug 2023 15:58:32 GMT">
						<outline text="Changes" isComment="true" created="Mon, 14 Aug 2023 14:50:30 GMT">
							<outline text="8/14/23; 10:50:32 AM by DW" created="Mon, 14 Aug 2023 14:50:31 GMT">
								<outline text="This is what's in theConfirmation." created="Mon, 14 Aug 2023 14:50:33 GMT">
									<outline text="magicString: magicString,"/>
									<outline text="email: email,"/>
									<outline text="flDeleted: false," created="Wed, 07 Dec 2022 23:48:53 GMT"/>
									<outline text="screenname," created="Thu, 08 Dec 2022 00:03:04 GMT"/>
									<outline text="flNewUser, //1/7/23 by DW" created="Sat, 07 Jan 2023 15:45:09 GMT"/>
									<outline text="urlRedirect, //3/3/23 by DW" created="Fri, 03 Mar 2023 15:55:22 GMT"/>
									<outline text="when: new Date ()"/>
									</outline>
								</outline>
							</outline>
						<outline text="if (config.flUseDatabaseForConfirmations) {" created="Mon, 14 Aug 2023 15:59:01 GMT">
							<outline text="theConfirmation.whenCreated = theConfirmation.when;" created="Mon, 14 Aug 2023 14:50:06 GMT"/>
							<outline text="delete theConfirmation.when;" created="Mon, 14 Aug 2023 14:50:19 GMT"/>
							<outline text="" created="Mon, 14 Aug 2023 14:50:06 GMT"/>
							<outline text="var sqltext = &quot;replace into pendingConfirmations &quot; + davesql.encodeValues (theConfirmation);"/>
							<outline text="davesql.runSqltext (sqltext, function (err, result) {">
								<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
									<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
									<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
									<outline text="console.log (&quot;addPendingConfirmation: email == &quot; + theConfirmation.email);" created="Sat, 19 Mar 2022 14:48:47 GMT"/>
									<outline text="callback (undefined);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
									<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Mon, 14 Aug 2023 15:59:34 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 14 Aug 2023 15:59:40 GMT">
							<outline text="stats.pendingConfirmations.push (theConfirmation);"/>
							<outline text="statsChanged ();"/>
							<outline text="callback (undefined); //no error" created="Mon, 14 Aug 2023 16:00:54 GMT"/>
							<outline text="}" created="Mon, 14 Aug 2023 15:59:43 GMT"/>
							</outline>
						<outline text="}" created="Mon, 14 Aug 2023 15:58:50 GMT"/>
						</outline>
					<outline text="function findPendingConfirmation (magicString, callback) { //8/14/23 by DW" created="Mon, 14 Aug 2023 15:10:57 GMT">
						<outline text="if (config.flUseDatabaseForConfirmations) {" created="Mon, 14 Aug 2023 16:15:23 GMT">
							<outline text="var sqltext = &quot;select * from pendingConfirmations where magicString=&quot; + davesql.encode (magicString) + &quot;;&quot;;"/>
							<outline text="davesql.runSqltext (sqltext, function (err, result) {">
								<outline text="if (err) {">
									<outline text="console.log (&quot;findPendingConfirmation: err.message == &quot; + err.message);"/>
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (result.length == 0) {" created="Mon, 14 Aug 2023 16:22:03 GMT">
										<outline text="const message = &quot;Can't find the pending confirmation.&quot;;" created="Mon, 14 Aug 2023 16:22:31 GMT"/>
										<outline text="callback ({message});" created="Mon, 14 Aug 2023 16:22:24 GMT"/>
										<outline text="}" created="Mon, 14 Aug 2023 16:22:13 GMT"/>
										</outline>
									<outline text="else {" created="Mon, 14 Aug 2023 16:22:14 GMT">
										<outline text="var theConfirmation = result [0];" created="Mon, 14 Aug 2023 18:39:30 GMT"/>
										<outline text="if (theConfirmation.urlRedirect == null) {" created="Mon, 14 Aug 2023 18:39:43 GMT">
											<outline text="theConfirmation.urlRedirect = undefined;" created="Mon, 14 Aug 2023 18:40:21 GMT"/>
											<outline text="}" created="Mon, 14 Aug 2023 18:40:03 GMT"/>
											</outline>
										<outline text="callback (undefined, theConfirmation);"/>
										<outline text="}" created="Mon, 14 Aug 2023 16:22:16 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Mon, 14 Aug 2023 16:15:24 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 14 Aug 2023 16:15:25 GMT">
							<outline text="var flFoundConfirm = false;" created="Mon, 14 Aug 2023 16:23:46 GMT"/>
							<outline text="stats.pendingConfirmations.forEach (function (item) {" created="Fri, 04 Nov 2022 15:19:33 GMT">
								<outline text="if (item.magicString == magicString) {" created="Fri, 04 Nov 2022 15:19:58 GMT">
									<outline text="callback (undefined, item);"/>
									<outline text="flFoundConfirm = true;"/>
									<outline text="}" created="Fri, 04 Nov 2022 15:20:15 GMT"/>
									</outline>
								<outline text="});" created="Fri, 04 Nov 2022 15:19:42 GMT"/>
								</outline>
							<outline text="if (!flFoundConfirm) {" created="Mon, 14 Aug 2023 16:23:54 GMT">
								<outline text="const message = &quot;Can't find the pending confirmation.&quot;;" created="Mon, 14 Aug 2023 16:22:31 GMT"/>
								<outline text="callback ({message});" created="Mon, 14 Aug 2023 16:22:24 GMT"/>
								<outline text="}" created="Mon, 14 Aug 2023 16:23:58 GMT"/>
								</outline>
							<outline text="}" created="Mon, 14 Aug 2023 16:15:28 GMT"/>
							</outline>
						<outline text="}" created="Mon, 14 Aug 2023 15:11:13 GMT"/>
						</outline>
					<outline text="function deletePendingConfirmation (item, callback) { //8/14/23 by DW" created="Mon, 14 Aug 2023 16:28:45 GMT">
						<outline text="Changes" isComment="true" created="Tue, 15 Aug 2023 15:33:37 GMT">
							<outline text="8/15/23; 11:33:48 AM by DW" created="Tue, 15 Aug 2023 15:33:46 GMT">
								<outline text="In the in-memory pending confirmations structure it was convenient to sweep up all the deleted posts at once, rather than one by one." created="Tue, 15 Aug 2023 15:33:48 GMT"/>
								<outline text="Not true with the SQL approach, so we do it differently." created="Tue, 15 Aug 2023 15:34:43 GMT"/>
								</outline>
							</outline>
						<outline text="if (config.flUseDatabaseForConfirmations) {" created="Mon, 14 Aug 2023 16:50:34 GMT">
							<outline text="const sqltext = &quot;delete from pendingConfirmations where magicString = &quot; + davesql.encode (item.magicString) + &quot;;&quot;; //8/15/23 by DW" created="Tue, 15 Aug 2023 15:35:24 GMT"/>
							<outline text="const sqltext = &quot;update pendingConfirmations set flDeleted = true where magicString = &quot; + davesql.encode (item.magicString) + &quot;;&quot;" isComment="true" created="Mon, 14 Aug 2023 16:44:39 GMT"/>
							<outline text="davesql.runSqltext (sqltext, function (err, result) {">
								<outline text="if (err) {">
									<outline text="if (callback !== undefined) {" created="Mon, 14 Aug 2023 16:48:45 GMT">
										<outline text="callback (err);"/>
										<outline text="}" created="Mon, 14 Aug 2023 16:48:52 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (callback !== undefined) {" created="Mon, 14 Aug 2023 16:48:45 GMT">
										<outline text="callback (undefined);"/>
										<outline text="}" created="Mon, 14 Aug 2023 16:48:52 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Mon, 14 Aug 2023 16:50:35 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 14 Aug 2023 16:50:36 GMT">
							<outline text="item.flDeleted = true; " created="Wed, 07 Dec 2022 23:45:57 GMT"/>
							<outline text="}" created="Mon, 14 Aug 2023 16:50:38 GMT"/>
							</outline>
						<outline text="}" created="Mon, 14 Aug 2023 16:28:59 GMT"/>
						</outline>
					<outline text="function checkPendingConfirmations (callback) { //8/14/23 by DW" created="Wed, 07 Dec 2022 23:46:17 GMT">
						<outline text="if (config.flUseDatabaseForConfirmations) {" created="Mon, 14 Aug 2023 16:50:34 GMT">
							<outline text="const sqltext = &quot;delete from pendingConfirmations where whenCreated &lt; now() - interval &quot; + config.confirmationExpiresAfter + &quot; minute;&quot;;" created="Mon, 14 Aug 2023 16:53:43 GMT"/>
							<outline text="const sqltext = &quot;delete from pendingConfirmations where flDeleted = true or whenCreated &lt; now() - interval &quot; + config.confirmationExpiresAfter + &quot; minute;&quot;;" isComment="true" created="Mon, 14 Aug 2023 16:53:43 GMT"/>
							<outline text="davesql.runSqltext (sqltext, function (err, result) {">
								<outline text="if (err) {">
									<outline text="if (callback !== undefined) {" created="Mon, 14 Aug 2023 16:48:45 GMT">
										<outline text="callback (err);"/>
										<outline text="}" created="Mon, 14 Aug 2023 16:48:52 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (callback !== undefined) {" created="Mon, 14 Aug 2023 16:48:45 GMT">
										<outline text="callback (undefined);"/>
										<outline text="}" created="Mon, 14 Aug 2023 16:48:52 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Mon, 14 Aug 2023 16:50:35 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 14 Aug 2023 16:50:36 GMT">
							<outline text="var flChanged = false;" created="Wed, 07 Dec 2022 23:46:48 GMT"/>
							<outline text="var newArray = new Array ();" created="Wed, 07 Dec 2022 23:46:56 GMT"/>
							<outline text="stats.pendingConfirmations.forEach (function (item) {" created="Wed, 07 Dec 2022 23:46:48 GMT">
								<outline text="if ((!item.flDeleted) &amp;&amp; (utils.secondsSince (item.when) &lt; config.confirmationExpiresAfter)) {" created="Wed, 07 Dec 2022 23:47:26 GMT">
									<outline text="newArray.push (item);" created="Wed, 07 Dec 2022 23:50:52 GMT"/>
									<outline text="}" created="Wed, 07 Dec 2022 23:47:59 GMT"/>
									</outline>
								<outline text="else {" created="Wed, 07 Dec 2022 23:52:38 GMT">
									<outline text="flChanged = true;" created="Wed, 07 Dec 2022 23:52:40 GMT"/>
									<outline text="}" created="Wed, 07 Dec 2022 23:52:43 GMT"/>
									</outline>
								<outline text="});" created="Wed, 07 Dec 2022 23:47:20 GMT"/>
								</outline>
							<outline text="if (flChanged) {" created="Wed, 07 Dec 2022 23:51:18 GMT">
								<outline text="stats.pendingConfirmations = newArray;" created="Wed, 07 Dec 2022 23:46:49 GMT"/>
								<outline text="statsChanged ();" created="Wed, 07 Dec 2022 23:51:32 GMT"/>
								<outline text="}" created="Wed, 07 Dec 2022 23:51:24 GMT"/>
								</outline>
							<outline text="}" created="Mon, 14 Aug 2023 16:50:38 GMT"/>
							</outline>
						<outline text="}" created="Wed, 07 Dec 2022 23:46:25 GMT"/>
						</outline>
					<outline text="" created="Mon, 14 Aug 2023 15:58:33 GMT"/>
					<outline text="function sendConfirmingEmail (email, screenname, flNewUser=false, urlRedirect, callback) {" created="Fri, 04 Nov 2022 14:43:14 GMT">
						<outline text="Changes" isComment="true" created="Sat, 07 Jan 2023 15:42:52 GMT">
							<outline text="4/14/23; 9:23:50 AM by DW" created="Fri, 14 Apr 2023 13:23:49 GMT">
								<outline text="Periods and at-signs should be allowed in user names because we use email addresses as usernames in Drummer. " created="Fri, 14 Apr 2023 13:23:50 GMT"/>
								</outline>
							<outline text="3/17/23; 12:27:10 PM by DW" created="Fri, 17 Mar 2023 16:27:09 GMT">
								<outline text="Check name for illegal characters when creating a new user." created="Fri, 17 Mar 2023 16:27:10 GMT"/>
								</outline>
							<outline text="3/8/23; 12:23:38 PM by DW" created="Wed, 08 Mar 2023 17:23:37 GMT">
								<outline text="email addresses are now unicase. " created="Wed, 08 Mar 2023 17:23:39 GMT"/>
								</outline>
							<outline text="3/3/23; 10:54:15 AM by DW" created="Fri, 03 Mar 2023 15:54:15 GMT">
								<outline text="New optional param urlredirect. Allow the caller to say where we redirect to." created="Fri, 03 Mar 2023 15:54:15 GMT"/>
								</outline>
							<outline text="1/7/23; 10:42:57 AM by DW" created="Sat, 07 Jan 2023 15:42:56 GMT">
								<outline text="New parameter flNewUser, if true, when the email address is confirmed, we create a new user, instead of adding the email address to an existing user. " created="Sat, 07 Jan 2023 15:42:57 GMT"/>
								<outline text="This is a step in the path towards moving off using Twitter for identity." created="Sat, 07 Jan 2023 15:43:30 GMT"/>
								</outline>
							</outline>
						<outline text="email = utils.stringLower (email); //3/8/23 by DW" created="Wed, 08 Mar 2023 17:19:30 GMT"/>
						<outline text="function getScreenname (callback) {" created="Tue, 10 Jan 2023 20:57:36 GMT">
							<outline text="function containsIllegalCharacter (name) { //3/17/23 by DW" created="Fri, 17 Mar 2023 15:48:23 GMT">
								<outline text="function isLegal (ch) {" created="Fri, 17 Mar 2023 15:51:21 GMT">
									<outline text="return (utils.isAlpha (ch) || utils.isNumeric (ch) || (ch == &quot;_&quot;) || (ch == &quot;.&quot;) || (ch == &quot;@&quot;));" created="Fri, 17 Mar 2023 15:50:40 GMT"/>
									<outline text="}" created="Fri, 17 Mar 2023 15:51:28 GMT"/>
									</outline>
								<outline text="for (var i = 0; i &lt; name.length; i++) {" created="Fri, 17 Mar 2023 15:56:14 GMT">
									<outline text="let ch = name [i];" created="Fri, 17 Mar 2023 15:56:40 GMT"/>
									<outline text="if (!isLegal (ch)) {" created="Fri, 17 Mar 2023 15:50:40 GMT">
										<outline text="return (true);" created="Fri, 17 Mar 2023 15:52:13 GMT"/>
										<outline text="}" created="Fri, 17 Mar 2023 15:52:04 GMT"/>
										</outline>
									<outline text="}" created="Fri, 17 Mar 2023 15:56:50 GMT"/>
									</outline>
								<outline text="return (false);" created="Fri, 17 Mar 2023 15:50:06 GMT"/>
								<outline text="}" created="Fri, 17 Mar 2023 15:49:00 GMT"/>
								</outline>
							<outline text="if (flNewUser) { //the caller had to provide it" created="Tue, 10 Jan 2023 20:57:37 GMT">
								<outline text="if (containsIllegalCharacter (screenname)) { //3/17/23 by DW" created="Fri, 17 Mar 2023 16:24:39 GMT">
									<outline text="const message = &quot;Can't create the user \&quot;&quot; + screenname + &quot;\&quot; because only alpha, numeric and underscore characters are allowed in names.&quot;" created="Sat, 07 Jan 2023 15:51:17 GMT"/>
									<outline text="callback ({message});" created="Mon, 06 Feb 2023 15:07:53 GMT"/>
									<outline text="}" created="Fri, 17 Mar 2023 16:25:25 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 17 Mar 2023 16:25:26 GMT">
									<outline text="config.isUserInDatabase (screenname, function (flInDatabase) {" created="Mon, 06 Feb 2023 15:06:38 GMT">
										<outline text="if (flInDatabase) {" created="Mon, 06 Feb 2023 15:07:20 GMT">
											<outline text="const message = &quot;Can't create the user \&quot;&quot; + screenname + &quot;\&quot; because there already is a user with that name.&quot;" created="Sat, 07 Jan 2023 15:51:17 GMT"/>
											<outline text="callback ({message});" created="Mon, 06 Feb 2023 15:07:53 GMT"/>
											<outline text="}" created="Mon, 06 Feb 2023 15:07:23 GMT"/>
											</outline>
										<outline text="else {" created="Mon, 06 Feb 2023 15:07:25 GMT">
											<outline text="callback (undefined, screenname);" created="Tue, 10 Jan 2023 21:06:33 GMT"/>
											<outline text="}" created="Mon, 06 Feb 2023 15:07:27 GMT"/>
											</outline>
										<outline text="});" created="Mon, 06 Feb 2023 15:06:57 GMT"/>
										</outline>
									<outline text="}" created="Fri, 17 Mar 2023 16:25:27 GMT"/>
									</outline>
								<outline text="}" created="Tue, 10 Jan 2023 20:57:49 GMT"/>
								</outline>
							<outline text="else { //we have to look it up" created="Tue, 10 Jan 2023 21:05:53 GMT">
								<outline text="config.getScreenNameFromEmail (email, callback);" created="Tue, 10 Jan 2023 21:04:17 GMT"/>
								<outline text="}" created="Tue, 10 Jan 2023 21:05:55 GMT"/>
								</outline>
							<outline text="}" created="Tue, 10 Jan 2023 21:05:42 GMT"/>
							</outline>
						<outline text="getScreenname (function (err, screenname) {" created="Tue, 10 Jan 2023 20:57:37 GMT">
							<outline text="if (err) {" created="Tue, 10 Jan 2023 21:11:35 GMT">
								<outline text="callback (err);" created="Tue, 10 Jan 2023 21:11:48 GMT"/>
								<outline text="}" created="Tue, 10 Jan 2023 21:11:37 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 10 Jan 2023 21:11:38 GMT">
								<outline text="const magicString = utils.getRandomPassword (10);"/>
								<outline text="const urlWebApp = config.urlServerForEmail; //2/6/23 by DW" created="Fri, 04 Nov 2022 14:46:31 GMT"/>
								<outline text="const urlWebApp = &quot;http://&quot; + config.myDomain + &quot;/&quot;;" isComment="true" created="Fri, 04 Nov 2022 14:46:31 GMT"/>
								<outline text="console.log (&quot;sendConfirmingEmail: email == &quot; + email + &quot;, urlWebApp == &quot; + urlWebApp);"/>
								<outline text="var obj = {">
									<outline text="magicString: magicString,"/>
									<outline text="urlWebApp: urlWebApp," isComment="true"/>
									<outline text="email: email,"/>
									<outline text="flDeleted: false," created="Wed, 07 Dec 2022 23:48:53 GMT"/>
									<outline text="screenname," created="Thu, 08 Dec 2022 00:03:04 GMT"/>
									<outline text="flNewUser, //1/7/23 by DW" created="Sat, 07 Jan 2023 15:45:09 GMT"/>
									<outline text="urlRedirect, //3/3/23 by DW" created="Fri, 03 Mar 2023 15:55:22 GMT"/>
									<outline text="when: new Date ()"/>
									<outline text="};"/>
									</outline>
								<outline text="addPendingConfirmation (obj, function (err) { //8/14/23 by DW" created="Mon, 14 Aug 2023 16:03:49 GMT">
									<outline text="if (err) {" created="Mon, 14 Aug 2023 16:04:15 GMT">
										<outline text="callback (err);" created="Tue, 10 Jan 2023 21:11:48 GMT"/>
										<outline text="}" created="Mon, 14 Aug 2023 16:04:18 GMT"/>
										</outline>
									<outline text="else {" created="Mon, 14 Aug 2023 16:04:19 GMT">
										<outline text="console.log (&quot;sendConfirmingEmail: obj == &quot; + utils.jsonStringify (obj));"/>
										<outline text="var params = {">
											<outline text="title: config.confirmEmailSubject,"/>
											<outline text="operationToConfirm: config.operationToConfirm," created="Fri, 04 Nov 2022 15:28:33 GMT"/>
											<outline text="confirmationUrl: urlWebApp + &quot;userconfirms?emailConfirmCode=&quot; + encodeURIComponent (magicString)"/>
											<outline text="};"/>
											</outline>
										<outline text="fs.readFile (config.fnameEmailTemplate, function (err, emailTemplate) {">
											<outline text="if (err) {">
												<outline text="const message = &quot;Error reading email template.&quot;;" created="Wed, 07 Dec 2022 19:01:22 GMT"/>
												<outline text="console.log (&quot;sendConfirmingEmail: err.message == &quot; + err.message);"/>
												<outline text="callback ({message});" created="Wed, 07 Dec 2022 19:01:05 GMT"/>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="var mailtext = utils.multipleReplaceAll (emailTemplate.toString (), params, false, &quot;[%&quot;, &quot;%]&quot;);"/>
												<outline text="mail.send (email, params.title, mailtext, config.mailSender, function (err, data) {">
													<outline text="if (err) {">
														<outline text="callback (err);"/>
														<outline text="}"/>
														</outline>
													<outline text="else {">
														<outline text="callback (undefined, {message: &quot;Please check your email.&quot;});"/>
														<outline text="}"/>
														</outline>
													<outline text="});"/>
													</outline>
												<outline text="const f = config.dataFolder + &quot;lastmail.html&quot;;" created="Fri, 04 Nov 2022 14:54:55 GMT"/>
												<outline text="utils.sureFilePath (f, function () {" created="Fri, 04 Nov 2022 14:54:33 GMT">
													<outline text="fs.writeFile (f, mailtext, function (err) {">
														<outline text="});"/>
														</outline>
													<outline text="});" created="Fri, 04 Nov 2022 14:54:43 GMT"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}" created="Mon, 14 Aug 2023 16:04:20 GMT"/>
										</outline>
									<outline text="});" created="Mon, 14 Aug 2023 16:04:04 GMT"/>
									</outline>
								<outline text="}" created="Tue, 10 Jan 2023 21:11:40 GMT"/>
								</outline>
							<outline text="});" created="Tue, 10 Jan 2023 21:07:02 GMT"/>
							</outline>
						<outline text="}" created="Fri, 04 Nov 2022 14:43:25 GMT"/>
						</outline>
					<outline text="function receiveConfirmation (emailConfirmCode, callback) {" created="Fri, 04 Nov 2022 15:17:45 GMT">
						<outline text="Changes" isComment="true" created="Fri, 03 Mar 2023 15:56:03 GMT">
							<outline text="3/3/23; 10:56:07 AM by DW" created="Fri, 03 Mar 2023 15:56:06 GMT">
								<outline text="If there's an urlRedirect value in the confirmation record, redirect to that url." created="Fri, 03 Mar 2023 15:56:07 GMT"/>
								</outline>
							</outline>
						<outline text="var urlWebApp = config.urlServerForClient; //2/5/23 by DW" created="Fri, 04 Nov 2022 14:46:31 GMT"/>
						<outline text="var urlRedirect = undefined, flFoundConfirm = false;" created="Fri, 04 Nov 2022 15:19:32 GMT"/>
						<outline text="function encode (s) {" created="Sat, 07 Jan 2023 20:06:26 GMT">
							<outline text="return (encodeURIComponent (s));" created="Sat, 07 Jan 2023 20:06:34 GMT"/>
							<outline text="}" created="Sat, 07 Jan 2023 20:06:38 GMT"/>
							</outline>
						<outline text="" created="Mon, 14 Aug 2023 16:24:30 GMT"/>
						<outline text="findPendingConfirmation (emailConfirmCode, function (err, item) {" created="Mon, 14 Aug 2023 16:24:30 GMT">
							<outline text="if (err) {" created="Mon, 14 Aug 2023 16:25:22 GMT">
								<outline text="if (urlRedirect === undefined) {" created="Fri, 04 Nov 2022 16:04:30 GMT">
									<outline text="urlRedirect = urlWebApp;" created="Fri, 04 Nov 2022 15:22:04 GMT"/>
									<outline text="}" created="Fri, 04 Nov 2022 16:04:38 GMT"/>
									</outline>
								<outline text="callback (urlRedirect + &quot;?failedLogin=true&amp;message=&quot; + encode (err.message));" created="Fri, 04 Nov 2022 15:51:27 GMT"/>
								<outline text="}" created="Mon, 14 Aug 2023 16:25:30 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 14 Aug 2023 16:25:31 GMT">
								<outline text="if (config.addEmailToUserInDatabase !== undefined) { " created="Wed, 10 Aug 2022 19:16:30 GMT">
									<outline text="if (item.urlRedirect !== undefined) { //3/3/23 by DW" created="Fri, 03 Mar 2023 15:57:58 GMT">
										<outline text="urlWebApp = item.urlRedirect;" created="Fri, 03 Mar 2023 15:58:16 GMT"/>
										<outline text="}" created="Fri, 03 Mar 2023 15:58:11 GMT"/>
										</outline>
									<outline text="config.addEmailToUserInDatabase (item.screenname, item.email, item.magicString, item.flNewUser, function (err, emailSecret) {" created="Thu, 08 Dec 2022 00:03:31 GMT">
										<outline text="if (err) {" created="Sun, 25 Dec 2022 15:28:31 GMT">
											<outline text="urlRedirect = urlWebApp + &quot;?failedLogin=true&amp;message=&quot; + encode (err.message); " created="Fri, 04 Nov 2022 15:22:04 GMT"/>
											<outline text="}" created="Sun, 25 Dec 2022 15:28:33 GMT"/>
											</outline>
										<outline text="else {" created="Sun, 25 Dec 2022 15:28:34 GMT">
											<outline text="urlRedirect = urlWebApp + &quot;?emailconfirmed=true&amp;email=&quot; + encode (item.email) + &quot;&amp;code=&quot; + encode (emailSecret) + &quot;&amp;screenname=&quot; + encode (item.screenname);" created="Fri, 04 Nov 2022 15:22:04 GMT"/>
											<outline text="deletePendingConfirmation (item);" created="Mon, 14 Aug 2023 16:29:41 GMT"/>
											<outline text="}" created="Sun, 25 Dec 2022 15:28:36 GMT"/>
											</outline>
										<outline text="callback (urlRedirect);" created="Fri, 04 Nov 2022 15:51:27 GMT"/>
										<outline text="});" created="Sun, 25 Dec 2022 15:26:45 GMT"/>
										</outline>
									<outline text="}" created="Wed, 10 Aug 2022 19:16:49 GMT"/>
									</outline>
								<outline text="}" created="Mon, 14 Aug 2023 16:25:35 GMT"/>
								</outline>
							<outline text="});" created="Mon, 14 Aug 2023 16:24:51 GMT"/>
							</outline>
						<outline text="}" created="Fri, 04 Nov 2022 15:18:07 GMT"/>
						</outline>
					<outline text="function sendConfirmingEmail (email, screenname, flNewUser=false, urlRedirect, callback) {" isComment="true" created="Fri, 04 Nov 2022 14:43:14 GMT">
						<outline text="Changes" isComment="true" created="Sat, 07 Jan 2023 15:42:52 GMT">
							<outline text="4/14/23; 9:23:50 AM by DW" created="Fri, 14 Apr 2023 13:23:49 GMT">
								<outline text="Periods and at-signs should be allowed in user names because we use email addresses as usernames in Drummer. " created="Fri, 14 Apr 2023 13:23:50 GMT"/>
								</outline>
							<outline text="3/17/23; 12:27:10 PM by DW" created="Fri, 17 Mar 2023 16:27:09 GMT">
								<outline text="Check name for illegal characters when creating a new user." created="Fri, 17 Mar 2023 16:27:10 GMT"/>
								</outline>
							<outline text="3/8/23; 12:23:38 PM by DW" created="Wed, 08 Mar 2023 17:23:37 GMT">
								<outline text="email addresses are now unicase. " created="Wed, 08 Mar 2023 17:23:39 GMT"/>
								</outline>
							<outline text="3/3/23; 10:54:15 AM by DW" created="Fri, 03 Mar 2023 15:54:15 GMT">
								<outline text="New optional param urlredirect. Allow the caller to say where we redirect to." created="Fri, 03 Mar 2023 15:54:15 GMT"/>
								</outline>
							<outline text="1/7/23; 10:42:57 AM by DW" created="Sat, 07 Jan 2023 15:42:56 GMT">
								<outline text="New parameter flNewUser, if true, when the email address is confirmed, we create a new user, instead of adding the email address to an existing user. " created="Sat, 07 Jan 2023 15:42:57 GMT"/>
								<outline text="This is a step in the path towards moving off using Twitter for identity." created="Sat, 07 Jan 2023 15:43:30 GMT"/>
								</outline>
							</outline>
						<outline text="email = utils.stringLower (email); //3/8/23 by DW" created="Wed, 08 Mar 2023 17:19:30 GMT"/>
						<outline text="function getScreenname (callback) {" created="Tue, 10 Jan 2023 20:57:36 GMT">
							<outline text="function containsIllegalCharacter (name) { //3/17/23 by DW" created="Fri, 17 Mar 2023 15:48:23 GMT">
								<outline text="function isLegal (ch) {" created="Fri, 17 Mar 2023 15:51:21 GMT">
									<outline text="return (utils.isAlpha (ch) || utils.isNumeric (ch) || (ch == &quot;_&quot;) || (ch == &quot;.&quot;) || (ch == &quot;@&quot;));" created="Fri, 17 Mar 2023 15:50:40 GMT"/>
									<outline text="}" created="Fri, 17 Mar 2023 15:51:28 GMT"/>
									</outline>
								<outline text="for (var i = 0; i &lt; name.length; i++) {" created="Fri, 17 Mar 2023 15:56:14 GMT">
									<outline text="let ch = name [i];" created="Fri, 17 Mar 2023 15:56:40 GMT"/>
									<outline text="if (!isLegal (ch)) {" created="Fri, 17 Mar 2023 15:50:40 GMT">
										<outline text="return (true);" created="Fri, 17 Mar 2023 15:52:13 GMT"/>
										<outline text="}" created="Fri, 17 Mar 2023 15:52:04 GMT"/>
										</outline>
									<outline text="}" created="Fri, 17 Mar 2023 15:56:50 GMT"/>
									</outline>
								<outline text="return (false);" created="Fri, 17 Mar 2023 15:50:06 GMT"/>
								<outline text="}" created="Fri, 17 Mar 2023 15:49:00 GMT"/>
								</outline>
							<outline text="if (flNewUser) { //the caller had to provide it" created="Tue, 10 Jan 2023 20:57:37 GMT">
								<outline text="if (containsIllegalCharacter (screenname)) { //3/17/23 by DW" created="Fri, 17 Mar 2023 16:24:39 GMT">
									<outline text="const message = &quot;Can't create the user \&quot;&quot; + screenname + &quot;\&quot; because only alpha, numeric and underscore characters are allowed in names.&quot;" created="Sat, 07 Jan 2023 15:51:17 GMT"/>
									<outline text="callback ({message});" created="Mon, 06 Feb 2023 15:07:53 GMT"/>
									<outline text="}" created="Fri, 17 Mar 2023 16:25:25 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 17 Mar 2023 16:25:26 GMT">
									<outline text="config.isUserInDatabase (screenname, function (flInDatabase) {" created="Mon, 06 Feb 2023 15:06:38 GMT">
										<outline text="if (flInDatabase) {" created="Mon, 06 Feb 2023 15:07:20 GMT">
											<outline text="const message = &quot;Can't create the user \&quot;&quot; + screenname + &quot;\&quot; because there already is a user with that name.&quot;" created="Sat, 07 Jan 2023 15:51:17 GMT"/>
											<outline text="callback ({message});" created="Mon, 06 Feb 2023 15:07:53 GMT"/>
											<outline text="}" created="Mon, 06 Feb 2023 15:07:23 GMT"/>
											</outline>
										<outline text="else {" created="Mon, 06 Feb 2023 15:07:25 GMT">
											<outline text="callback (undefined, screenname);" created="Tue, 10 Jan 2023 21:06:33 GMT"/>
											<outline text="}" created="Mon, 06 Feb 2023 15:07:27 GMT"/>
											</outline>
										<outline text="});" created="Mon, 06 Feb 2023 15:06:57 GMT"/>
										</outline>
									<outline text="}" created="Fri, 17 Mar 2023 16:25:27 GMT"/>
									</outline>
								<outline text="}" created="Tue, 10 Jan 2023 20:57:49 GMT"/>
								</outline>
							<outline text="else { //we have to look it up" created="Tue, 10 Jan 2023 21:05:53 GMT">
								<outline text="config.getScreenNameFromEmail (email, callback);" created="Tue, 10 Jan 2023 21:04:17 GMT"/>
								<outline text="}" created="Tue, 10 Jan 2023 21:05:55 GMT"/>
								</outline>
							<outline text="}" created="Tue, 10 Jan 2023 21:05:42 GMT"/>
							</outline>
						<outline text="getScreenname (function (err, screenname) {" created="Tue, 10 Jan 2023 20:57:37 GMT">
							<outline text="if (err) {" created="Tue, 10 Jan 2023 21:11:35 GMT">
								<outline text="callback (err);" created="Tue, 10 Jan 2023 21:11:48 GMT"/>
								<outline text="}" created="Tue, 10 Jan 2023 21:11:37 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 10 Jan 2023 21:11:38 GMT">
								<outline text="const magicString = utils.getRandomPassword (10);"/>
								<outline text="const urlWebApp = config.urlServerForEmail; //2/6/23 by DW" created="Fri, 04 Nov 2022 14:46:31 GMT"/>
								<outline text="const urlWebApp = &quot;http://&quot; + config.myDomain + &quot;/&quot;;" isComment="true" created="Fri, 04 Nov 2022 14:46:31 GMT"/>
								<outline text="console.log (&quot;sendConfirmingEmail: email == &quot; + email + &quot;, urlWebApp == &quot; + urlWebApp);"/>
								<outline text="var obj = {">
									<outline text="magicString: magicString,"/>
									<outline text="urlWebApp: urlWebApp," isComment="true"/>
									<outline text="email: email,"/>
									<outline text="flDeleted: false," created="Wed, 07 Dec 2022 23:48:53 GMT"/>
									<outline text="screenname," created="Thu, 08 Dec 2022 00:03:04 GMT"/>
									<outline text="flNewUser, //1/7/23 by DW" created="Sat, 07 Jan 2023 15:45:09 GMT"/>
									<outline text="urlRedirect, //3/3/23 by DW" created="Fri, 03 Mar 2023 15:55:22 GMT"/>
									<outline text="when: new Date ()"/>
									<outline text="};"/>
									</outline>
								<outline text="stats.pendingConfirmations.push (obj);"/>
								<outline text="statsChanged ();"/>
								<outline text="console.log (&quot;sendConfirmingEmail: obj == &quot; + utils.jsonStringify (obj));"/>
								<outline text="var params = {">
									<outline text="title: config.confirmEmailSubject,"/>
									<outline text="operationToConfirm: config.operationToConfirm," created="Fri, 04 Nov 2022 15:28:33 GMT"/>
									<outline text="confirmationUrl: urlWebApp + &quot;userconfirms?emailConfirmCode=&quot; + encodeURIComponent (magicString)"/>
									<outline text="};"/>
									</outline>
								<outline text="fs.readFile (config.fnameEmailTemplate, function (err, emailTemplate) {">
									<outline text="if (err) {">
										<outline text="const message = &quot;Error reading email template.&quot;;" created="Wed, 07 Dec 2022 19:01:22 GMT"/>
										<outline text="console.log (&quot;sendConfirmingEmail: err.message == &quot; + err.message);"/>
										<outline text="callback ({message});" created="Wed, 07 Dec 2022 19:01:05 GMT"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="var mailtext = utils.multipleReplaceAll (emailTemplate.toString (), params, false, &quot;[%&quot;, &quot;%]&quot;);"/>
										<outline text="mail.send (email, params.title, mailtext, config.mailSender, function (err, data) {">
											<outline text="if (err) {">
												<outline text="callback (err);"/>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="callback (undefined, {message: &quot;Please check your email.&quot;});"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="const f = config.dataFolder + &quot;lastmail.html&quot;;" created="Fri, 04 Nov 2022 14:54:55 GMT"/>
										<outline text="utils.sureFilePath (f, function () {" created="Fri, 04 Nov 2022 14:54:33 GMT">
											<outline text="fs.writeFile (f, mailtext, function (err) {">
												<outline text="});"/>
												</outline>
											<outline text="});" created="Fri, 04 Nov 2022 14:54:43 GMT"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}" created="Tue, 10 Jan 2023 21:11:40 GMT"/>
								</outline>
							<outline text="});" created="Tue, 10 Jan 2023 21:07:02 GMT"/>
							</outline>
						<outline text="}" created="Fri, 04 Nov 2022 14:43:25 GMT"/>
						</outline>
					<outline text="function receiveConfirmation (emailConfirmCode, callback) {" isComment="true" created="Fri, 04 Nov 2022 15:17:45 GMT">
						<outline text="Changes" isComment="true" created="Fri, 03 Mar 2023 15:56:03 GMT">
							<outline text="3/3/23; 10:56:07 AM by DW" created="Fri, 03 Mar 2023 15:56:06 GMT">
								<outline text="If there's an urlRedirect value in the confirmation record, redirect to that url." created="Fri, 03 Mar 2023 15:56:07 GMT"/>
								</outline>
							</outline>
						<outline text="var urlWebApp = config.urlServerForClient; //2/5/23 by DW" created="Fri, 04 Nov 2022 14:46:31 GMT"/>
						<outline text="var urlRedirect = undefined, flFoundConfirm = false;" created="Fri, 04 Nov 2022 15:19:32 GMT"/>
						<outline text="function encode (s) {" created="Sat, 07 Jan 2023 20:06:26 GMT">
							<outline text="return (encodeURIComponent (s));" created="Sat, 07 Jan 2023 20:06:34 GMT"/>
							<outline text="}" created="Sat, 07 Jan 2023 20:06:38 GMT"/>
							</outline>
						<outline text="stats.pendingConfirmations.forEach (function (item) {" created="Fri, 04 Nov 2022 15:19:33 GMT">
							<outline text="if (item.magicString == emailConfirmCode) {" created="Fri, 04 Nov 2022 15:19:58 GMT">
								<outline text="if (config.addEmailToUserInDatabase !== undefined) { " created="Wed, 10 Aug 2022 19:16:30 GMT">
									<outline text="if (item.urlRedirect !== undefined) { //3/3/23 by DW" created="Fri, 03 Mar 2023 15:57:58 GMT">
										<outline text="urlWebApp = item.urlRedirect;" created="Fri, 03 Mar 2023 15:58:16 GMT"/>
										<outline text="}" created="Fri, 03 Mar 2023 15:58:11 GMT"/>
										</outline>
									<outline text="config.addEmailToUserInDatabase (item.screenname, item.email, item.magicString, item.flNewUser, function (err, emailSecret) {" created="Thu, 08 Dec 2022 00:03:31 GMT">
										<outline text="if (err) {" created="Sun, 25 Dec 2022 15:28:31 GMT">
											<outline text="urlRedirect = urlWebApp + &quot;?failedLogin=true&amp;message=&quot; + encode (err.message); " created="Fri, 04 Nov 2022 15:22:04 GMT"/>
											<outline text="}" created="Sun, 25 Dec 2022 15:28:33 GMT"/>
											</outline>
										<outline text="else {" created="Sun, 25 Dec 2022 15:28:34 GMT">
											<outline text="urlRedirect = urlWebApp + &quot;?emailconfirmed=true&amp;email=&quot; + encode (item.email) + &quot;&amp;code=&quot; + encode (emailSecret) + &quot;&amp;screenname=&quot; + encode (item.screenname);" created="Fri, 04 Nov 2022 15:22:04 GMT"/>
											<outline text="item.flDeleted = true; " created="Wed, 07 Dec 2022 23:45:57 GMT"/>
											<outline text="}" created="Sun, 25 Dec 2022 15:28:36 GMT"/>
											</outline>
										<outline text="callback (urlRedirect);" created="Fri, 04 Nov 2022 15:51:27 GMT"/>
										<outline text="});" created="Sun, 25 Dec 2022 15:26:45 GMT"/>
										</outline>
									<outline text="}" created="Wed, 10 Aug 2022 19:16:49 GMT"/>
									</outline>
								<outline text="flFoundConfirm = true;"/>
								<outline text="}" created="Fri, 04 Nov 2022 15:20:15 GMT"/>
								</outline>
							<outline text="});" created="Fri, 04 Nov 2022 15:19:42 GMT"/>
							</outline>
						<outline text="if (!flFoundConfirm) {" created="Sun, 25 Dec 2022 15:52:40 GMT">
							<outline text="if (urlRedirect === undefined) {" created="Fri, 04 Nov 2022 16:04:30 GMT">
								<outline text="urlRedirect = urlWebApp + &quot;?failedLogin=true&amp;message=&quot; + encode (&quot;Can't find the pending confirmation.&quot;); " created="Fri, 04 Nov 2022 15:22:04 GMT"/>
								<outline text="}" created="Fri, 04 Nov 2022 16:04:38 GMT"/>
								</outline>
							<outline text="callback (urlRedirect);" created="Fri, 04 Nov 2022 15:51:27 GMT"/>
							<outline text="}" created="Sun, 25 Dec 2022 15:52:43 GMT"/>
							</outline>
						<outline text="}" created="Fri, 04 Nov 2022 15:18:07 GMT"/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="function startup (options, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="1/22/21; 11:19:04 AM by DW">
							<outline text="At start, copy scalars from options to config."/>
							</outline>
						</outline>
					<outline text="function readConfig (f, theConfig, flReportError, callback) { ">
						<outline text="Changes" isComment="true">
							<outline text="1/21/21; 12:35:00 PM by DW">
								<outline text="New param, flReportError."/>
								</outline>
							</outline>
						<outline text="fs.readFile (f, function (err, jsontext) {">
							<outline text="if (err) {">
								<outline text="if (flReportError) { //1/21/21 by DW">
									<outline text="console.log (&quot;readConfig: err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (jsontext);"/>
									<outline text="console.log (&quot;readConfig: f == &quot; + f + &quot;, jstruct == &quot; + utils.jsonStringify (jstruct));" isComment="true"/>
									<outline text="for (var x in jstruct) {">
										<outline text="theConfig [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readConfig: err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="callback ();"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function readConfigJson (callback) { //2/8/23 by DW" created="Wed, 08 Feb 2023 13:13:04 GMT">
						<outline text="Changes" isComment="true" created="Wed, 08 Feb 2023 13:13:23 GMT">
							<outline text="2/10/23; 4:39:22 PM by DW" created="Fri, 10 Feb 2023 21:39:22 GMT">
								<outline text="Use requireFromString to run the code in config.js. That way we can use fs.readFile to load the file, the same way we read config.json. None of the peculiarities of the normal &quot;require&quot; verv. " created="Fri, 10 Feb 2023 21:39:22 GMT"/>
								</outline>
							<outline text="2/8/23; 8:13:27 AM by DW" created="Wed, 08 Feb 2023 13:13:26 GMT">
								<outline text="First try to load and run config.js, if not read config.json." created="Wed, 08 Feb 2023 13:13:27 GMT"/>
								<outline text="We look first in the directory daveappserver was loaded from, but sometimes this is the lib folder and other times it's deep inside node_modules.  " created="Wed, 08 Feb 2023 13:33:01 GMT"/>
								<outline text="Not sure how &quot;require&quot; handles it in the latter case, but in the lib folder it looks for config.js in the lib folder." created="Wed, 08 Feb 2023 13:50:35 GMT"/>
								<outline text="The problem is solved by looking in the parent directory if we didn't load it from the same folder daveappserver is in. " created="Wed, 08 Feb 2023 13:50:56 GMT"/>
								</outline>
							</outline>
						<outline text="fs.readFile (&quot;config.js&quot;, function (err, scripttext) {">
							<outline text="var flReadConfigJson = true;" created="Fri, 10 Feb 2023 21:53:48 GMT"/>
							<outline text="if (!err) {">
								<outline text="try {" created="Fri, 10 Feb 2023 21:48:54 GMT">
									<outline text="scripttext = scripttext.toString ();" created="Fri, 10 Feb 2023 22:04:42 GMT"/>
									<outline text="var jstruct = requireFromString (scripttext);" created="Fri, 10 Feb 2023 21:49:11 GMT"/>
									<outline text="for (var x in jstruct) {" created="Wed, 08 Feb 2023 13:18:47 GMT">
										<outline text="config [x] = jstruct [x];" created="Wed, 08 Feb 2023 13:18:52 GMT"/>
										<outline text="}" created="Wed, 08 Feb 2023 13:19:05 GMT"/>
										</outline>
									<outline text="flReadConfigJson = false;" created="Fri, 10 Feb 2023 21:54:00 GMT"/>
									<outline text="callback ();" created="Fri, 10 Feb 2023 21:52:20 GMT"/>
									<outline text="}" created="Fri, 10 Feb 2023 21:48:58 GMT"/>
									</outline>
								<outline text="catch (err) {" created="Fri, 10 Feb 2023 21:48:59 GMT">
									<outline text="console.log (err.message);" created="Fri, 10 Feb 2023 22:03:06 GMT"/>
									<outline text="}" created="Fri, 10 Feb 2023 21:49:03 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (flReadConfigJson) {" created="Fri, 10 Feb 2023 21:51:27 GMT">
								<outline text="readConfig (fnameConfig, config, true, callback);" created="Wed, 08 Feb 2023 13:17:46 GMT"/>
								<outline text="}" created="Fri, 10 Feb 2023 21:51:30 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Wed, 08 Feb 2023 13:13:14 GMT"/>
						</outline>
					<outline text="function readConfigJson (callback) { //2/8/23 by DW" isComment="true" created="Wed, 08 Feb 2023 13:13:04 GMT">
						<outline text="Changes" isComment="true" created="Wed, 08 Feb 2023 13:13:23 GMT">
							<outline text="2/8/23; 8:13:27 AM by DW" created="Wed, 08 Feb 2023 13:13:26 GMT">
								<outline text="First try to load and run config.js, if not read config.json." created="Wed, 08 Feb 2023 13:13:27 GMT"/>
								<outline text="We look first in the directory daveappserver was loaded from, but sometimes this is the lib folder and other times it's deep inside node_modules.  " created="Wed, 08 Feb 2023 13:33:01 GMT"/>
								<outline text="Not sure how &quot;require&quot; handles it in the latter case, but in the lib folder it looks for config.js in the lib folder." created="Wed, 08 Feb 2023 13:50:35 GMT"/>
								<outline text="The problem is solved by looking in the parent directory if we didn't load it from the same folder daveappserver is in. " created="Wed, 08 Feb 2023 13:50:56 GMT"/>
								</outline>
							</outline>
						<outline text="var configJs;" created="Wed, 08 Feb 2023 13:19:33 GMT"/>
						<outline text="try {" created="Wed, 08 Feb 2023 13:13:23 GMT">
							<outline text="configJs = require (&quot;./config.js&quot;);" created="Wed, 08 Feb 2023 13:15:24 GMT"/>
							<outline text="}" created="Wed, 08 Feb 2023 13:15:09 GMT"/>
							</outline>
						<outline text="catch (err) { //try in the parent directory, assuming daveappserver is running in lib sub-directory" created="Wed, 08 Feb 2023 13:15:10 GMT">
							<outline text="try {" created="Wed, 08 Feb 2023 13:43:41 GMT">
								<outline text="configJs = require (&quot;../config.js&quot;);" created="Wed, 08 Feb 2023 13:15:24 GMT"/>
								<outline text="}" created="Wed, 08 Feb 2023 13:43:47 GMT"/>
								</outline>
							<outline text="catch (err) { //fallback to reading config.json" created="Wed, 08 Feb 2023 13:43:48 GMT">
								<outline text="readConfig (fnameConfig, config, true, callback);" created="Wed, 08 Feb 2023 13:17:46 GMT"/>
								<outline text="return;" created="Wed, 08 Feb 2023 13:18:08 GMT"/>
								<outline text="}" created="Wed, 08 Feb 2023 13:43:52 GMT"/>
								</outline>
							<outline text="}" created="Wed, 08 Feb 2023 13:15:17 GMT"/>
							</outline>
						<outline text="const jstruct = configJs;" created="Wed, 08 Feb 2023 13:18:28 GMT"/>
						<outline text="for (var x in jstruct) {" created="Wed, 08 Feb 2023 13:18:47 GMT">
							<outline text="config [x] = jstruct [x];" created="Wed, 08 Feb 2023 13:18:52 GMT"/>
							<outline text="}" created="Wed, 08 Feb 2023 13:19:05 GMT"/>
							</outline>
						<outline text="callback ();" created="Wed, 08 Feb 2023 13:19:07 GMT"/>
						<outline text="}" created="Wed, 08 Feb 2023 13:13:14 GMT"/>
						</outline>
					<outline text="function startDavetwitter (httpRequestCallback) { //patch over a design problem in starting up davetwitter and davehttp -- 7/20/20 by DW ">
						<outline text="Changes" isComment="true">
							<outline text="1/27/21; 10:53:07 AM by DW">
								<outline text="Customized and streamlined for daveappserver."/>
								</outline>
							<outline text="7/20/20; 11:45:50 AM by DW">
								<outline text="Created. I made a mistake designing the interface to davetwitter. "/>
								<outline text="We're only passing config.twitter to davetwitter, so we make sure it has all the right elements to configure davehttp as well."/>
								<outline text="It's a mess. We should be able to set up davehttp here, it shouldn't be started in davetwitter. "/>
								<outline text="This can be dropped into any davetwitter-using app. possibly should be included in davetwitter itself at some point. "/>
								<outline text="Whew."/>
								</outline>
							</outline>
						<outline text="if (config.twitter === undefined) {">
							<outline text="config.twitter = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="config.twitter.myPort = config.port;"/>
						<outline text="config.twitter.httpPort = config.port;"/>
						<outline text="config.twitter.myDomain = config.myDomain;"/>
						<outline text="config.twitter.flLogToConsole = config.flLogToConsole;"/>
						<outline text="config.twitter.flAllowAccessFromAnywhere = config.flAllowAccessFromAnywhere;"/>
						<outline text="config.twitter.flPostEnabled = config.flPostEnabled;"/>
						<outline text="config.twitter.flTraceOnError = config.flTraceOnError; //8/15/23 by DW"/>
						<outline text="config.twitter.blockedAddresses = config.blockedAddresses;"/>
						<outline text="config.twitter.httpRequestCallback = httpRequestCallback;"/>
						<outline text="config.twitter.http404Callback = http404Callback; //1/24/21 by DW"/>
						<outline text="config.twitter.twitterConsumerKey = config.twitterConsumerKey;"/>
						<outline text="config.twitter.twitterConsumerSecret = config.twitterConsumerSecret;"/>
						<outline text="config.twitter.userLogonCallback = userLogonCallback; //8/14/22 by DW"/>
						<outline text="if (config.urlFavicon !== undefined) { //1/26/23 by DW" created="Fri, 27 Jan 2023 00:00:18 GMT">
							<outline text="config.twitter.urlFavicon = config.urlFavicon;"/>
							<outline text="}" created="Fri, 27 Jan 2023 00:00:26 GMT"/>
							</outline>
						<outline text="davetwitter.start (config.twitter);"/>
						<outline text="}"/>
						</outline>
					<outline text="function startDavemail () { //1/23/23 by DW" created="Mon, 23 Jan 2023 20:37:08 GMT">
						<outline text="var options;" created="Mon, 23 Jan 2023 20:37:25 GMT"/>
						<outline text="if (config.smtpHost === undefined) {" created="Mon, 23 Jan 2023 20:38:50 GMT">
							<outline text="options = {" created="Mon, 23 Jan 2023 20:39:24 GMT">
								<outline text="flUseSes: true" created="Mon, 23 Jan 2023 20:41:52 GMT"/>
								<outline text="};" created="Mon, 23 Jan 2023 20:41:56 GMT"/>
								</outline>
							<outline text="}" created="Mon, 23 Jan 2023 20:39:04 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 23 Jan 2023 20:39:53 GMT">
							<outline text="options = {" created="Mon, 23 Jan 2023 20:39:24 GMT">
								<outline text="flUseSes: false," created="Mon, 23 Jan 2023 20:40:43 GMT"/>
								<outline text="smtpHost: config.smtpHost," created="Mon, 23 Jan 2023 20:40:50 GMT"/>
								<outline text="port: config.smtpPort," created="Mon, 23 Jan 2023 20:41:00 GMT"/>
								<outline text="username: config.smtpUsername," created="Mon, 23 Jan 2023 20:41:16 GMT"/>
								<outline text="password: config.smtpPassword" created="Mon, 23 Jan 2023 20:41:28 GMT"/>
								<outline text="};" created="Mon, 23 Jan 2023 20:40:42 GMT"/>
								</outline>
							<outline text="}" created="Mon, 23 Jan 2023 20:39:55 GMT"/>
							</outline>
						<outline text="mail.start (options);" created="Mon, 23 Jan 2023 20:37:37 GMT"/>
						<outline text="}" created="Mon, 23 Jan 2023 20:37:16 GMT"/>
						</outline>
					<outline text="function handleHttpRequest (theRequest) {">
						<outline text="Changes" isComment="true">
							<outline text="8/10/22; 3:19:18 PM by DW" created="Wed, 10 Aug 2022 19:19:17 GMT">
								<outline text="What we really needed was an asynch addMacro callback." created="Wed, 10 Aug 2022 19:19:18 GMT"/>
								</outline>
							<outline text="8/10/22; 10:45:50 AM by DW" created="Wed, 10 Aug 2022 14:45:50 GMT">
								<outline text="Add a second param to the addMacroToPagetable callback -- theRequest object. " created="Wed, 10 Aug 2022 14:45:50 GMT"/>
								<outline text="This allows us to put values in the pagetable that are a function of a URL param. " created="Wed, 10 Aug 2022 14:46:51 GMT"/>
								<outline text="Used in the the News Product server for FeedLand." created="Wed, 10 Aug 2022 14:46:53 GMT"/>
								</outline>
							<outline text="7/18/20; 10:55:45 AM by DW">
								<outline text="This is a callback for davetwitter. We get the first shot at any request. Return true if we consumed it, false otherwise."/>
								</outline>
							</outline>
						<outline text="const params = theRequest.params;"/>
						<outline text="const token = params.oauth_token;"/>
						<outline text="const secret = params.oauth_token_secret;"/>
						<outline text="const flprivate = (params.flprivate === undefined) ? false : utils.getBoolean (params.flprivate);"/>
						<outline text=""/>
						<outline text="stats.ctHits++;"/>
						<outline text="stats.ctHitsToday++;"/>
						<outline text="stats.ctHitsThisRun++;"/>
						<outline text="stats.whenLastHit = new Date ();"/>
						<outline text="statsChanged ();"/>
						<outline text=""/>
						<outline text="function returnPlainText (s) {">
							<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, s.toString ());"/>
							<outline text="}"/>
							</outline>
						<outline text="function returnData (jstruct) {">
							<outline text="if (jstruct === undefined) {">
								<outline text="jstruct = {};"/>
								<outline text="}"/>
								</outline>
							<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
							<outline text="}"/>
							</outline>
						<outline text="function returnHtml (htmltext) {">
							<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, htmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="function returnXml (xmltext) {">
							<outline text="theRequest.httpReturn (200, &quot;text/xml&quot;, xmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="function returnNotFound () {">
							<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="function returnError (jstruct) {">
							<outline text="theRequest.httpReturn (500, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
							<outline text="}"/>
							</outline>
						<outline text="function httpReturn (err, jstruct) {">
							<outline text="if (err) {">
								<outline text="returnError (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="returnData (jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function httpReturnRedirect (url, code) { //9/30/20 by DW">
							<outline text="var headers = {">
								<outline text="location: url"/>
								<outline text="};"/>
								</outline>
							<outline text="if (code === undefined) {">
								<outline text="code = 302;"/>
								<outline text="}"/>
								</outline>
							<outline text="theRequest.httpReturn (code, &quot;text/plain&quot;, code + &quot; REDIRECT&quot;, headers);"/>
							<outline text="}"/>
							<outline text=""/>
							</outline>
						<outline text="function httpReturnObject (err, jstruct) {">
							<outline text="if (err) {">
								<outline text="returnError (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="returnData (jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function httpReturnZipFile (f) { //4/13/20 by DW">
							<outline text="fs.readFile (f, function (err, data) {">
								<outline text="if (err) {">
									<outline text="returnError (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="theRequest.httpReturn (200, &quot;application/zip&quot;, data);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function returnServerHomePage () {">
							<outline text="Changes" isComment="true" created="Tue, 09 Mar 2021 16:44:49 GMT">
								<outline text="9/16/23; 10:29:24 AM by DW" created="Sat, 16 Sep 2023 14:29:23 GMT">
									<outline text="Reorganized code so we read the template text after calling the callbacks. They can change the url of the home page source. This was needed when we added newsproduct rendering to the FeedLand server." created="Sat, 16 Sep 2023 14:44:07 GMT"/>
									</outline>
								<outline text="7/26/22; 11:31:05 AM by DW" created="Tue, 26 Jul 2022 15:31:05 GMT">
									<outline text="" created="Tue, 26 Jul 2022 15:31:05 GMT"/>
									</outline>
								<outline text="7/22/22; 10:20:05 AM by DW" created="Fri, 22 Jul 2022 14:20:04 GMT">
									<outline text="At first I added the whitelist to the pagetable, but changed the design, and added a call that determines whether a user is whitelisted. " created="Fri, 22 Jul 2022 14:20:06 GMT"/>
									</outline>
								<outline text="2/4/22; 3:57:54 PM by DW" created="Fri, 04 Feb 2022 20:57:53 GMT">
									<outline text="A new config value config.pathServerHomePageSource allows the home page text to be loaded from a local file." created="Fri, 04 Feb 2022 20:57:58 GMT"/>
									</outline>
								<outline text="3/9/21; 11:44:51 AM by DW" created="Tue, 09 Mar 2021 16:44:50 GMT">
									<outline text="The threadviewer app wants to handle URLs like this" created="Tue, 09 Mar 2021 16:44:52 GMT">
										<outline text="http://threadviewer/1369210173953372166" created="Tue, 09 Mar 2021 16:45:06 GMT"/>
										</outline>
									<outline text="The value of the id has to be transmitted to the JS code in the home page." created="Tue, 09 Mar 2021 16:45:25 GMT"/>
									<outline text="So the upper level changes the path to &quot;/&quot; and puts the id in theRequest.addToPagetable, and we handle it here. " created="Tue, 09 Mar 2021 16:45:48 GMT"/>
									</outline>
								</outline>
							<outline text="var pagetable = {">
								<outline text="productName: config.productName, "/>
								<outline text="productNameForDisplay: config.productNameForDisplay, "/>
								<outline text="version: config.version,"/>
								<outline text="urlServerForClient: config.urlServerForClient,"/>
								<outline text="urlWebsocketServerForClient: config.urlWebsocketServerForClient,"/>
								<outline text="flEnableLogin: config.flEnableLogin,"/>
								<outline text="prefsPath: config.prefsPath,"/>
								<outline text="docsPath: config.docsPath,"/>
								<outline text="flUseTwitterIdentity: config.flUseTwitterIdentity, //2/6/23 by DW"/>
								<outline text="idGitHubClient: config.githubClientId, //11/9/21 by DW" created="Tue, 09 Nov 2021 16:06:48 GMT"/>
								<outline text="flWebsocketEnabled: config.flWebsocketEnabled, //2/8/23 by DW" created="Wed, 08 Feb 2023 15:21:30 GMT"/>
								<outline text="urlServerHomePageSource: config.urlServerHomePageSource, //9/16/23 by DW" created="Sat, 16 Sep 2023 14:33:11 GMT"/>
								<outline text="pathServerHomePageSource: config.pathServerHomePageSource //9/16/23 by DW" created="Sat, 16 Sep 2023 14:33:46 GMT"/>
								<outline text="};"/>
								</outline>
							<outline text="function getTemplateText (callback) {" created="Sat, 16 Sep 2023 14:35:42 GMT">
								<outline text="if (pagetable.pathServerHomePageSource !== undefined) {" created="Sat, 16 Sep 2023 14:35:42 GMT">
									<outline text="fs.readFile (pagetable.pathServerHomePageSource, function (err, templatetext) {" created="Fri, 04 Feb 2022 20:59:33 GMT">
										<outline text="if (err) {" created="Fri, 04 Feb 2022 21:00:01 GMT">
											<outline text="callback (err);" created="Sat, 16 Sep 2023 14:38:54 GMT"/>
											<outline text="}" created="Fri, 04 Feb 2022 21:00:05 GMT"/>
											</outline>
										<outline text="else {" created="Fri, 04 Feb 2022 21:00:06 GMT">
											<outline text="callback (undefined, templatetext);" created="Fri, 04 Feb 2022 21:01:42 GMT"/>
											<outline text="}" created="Fri, 04 Feb 2022 21:00:07 GMT"/>
											</outline>
										<outline text="});" created="Fri, 04 Feb 2022 20:59:53 GMT"/>
										</outline>
									<outline text="}" created="Sat, 16 Sep 2023 14:37:11 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 16 Sep 2023 14:39:19 GMT">
									<outline text="request (pagetable.urlServerHomePageSource, function (err, response, templatetext) {">
										<outline text="if (err) {" created="Sat, 16 Sep 2023 14:39:59 GMT">
											<outline text="callback (err);" created="Sat, 16 Sep 2023 14:40:01 GMT"/>
											<outline text="}" created="Sat, 16 Sep 2023 14:40:04 GMT"/>
											</outline>
										<outline text="else {" created="Sat, 16 Sep 2023 14:40:05 GMT">
											<outline text="if ((response.statusCode &gt;= 200) &amp;&amp; (response.statusCode &lt;= 299)) {" created="Sat, 16 Sep 2023 14:41:09 GMT">
												<outline text="callback (undefined, templatetext);" created="Sat, 16 Sep 2023 14:42:26 GMT"/>
												<outline text="}" created="Sat, 16 Sep 2023 14:41:10 GMT"/>
												</outline>
											<outline text="else {" created="Sat, 16 Sep 2023 14:41:11 GMT">
												<outline text="const message = &quot;HTTP error == &quot; + response.statusCode;" created="Fri, 15 Sep 2023 15:08:57 GMT"/>
												<outline text="callback ({message});" created="Fri, 15 Sep 2023 15:08:57 GMT"/>
												<outline text="}" created="Sat, 16 Sep 2023 14:41:15 GMT"/>
												</outline>
											<outline text="}" created="Sat, 16 Sep 2023 14:40:07 GMT"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}" created="Sat, 16 Sep 2023 14:39:20 GMT"/>
									</outline>
								<outline text="}" created="Sat, 16 Sep 2023 14:37:38 GMT"/>
								</outline>
							<outline text="function buildAndServeHomepage () {" created="Wed, 10 Aug 2022 19:18:04 GMT">
								<outline text="getTemplateText (function (err, templatetext) {" created="Sat, 16 Sep 2023 14:35:42 GMT">
									<outline text="if (err) {" created="Sat, 16 Sep 2023 14:53:18 GMT">
										<outline text="returnError (err);" created="Sat, 16 Sep 2023 14:53:20 GMT"/>
										<outline text="}" created="Sat, 16 Sep 2023 14:53:32 GMT"/>
										</outline>
									<outline text="else {" created="Sat, 16 Sep 2023 14:53:33 GMT">
										<outline text="const pagetext = utils.multipleReplaceAll (templatetext.toString (), pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"/>
										<outline text="returnHtml (pagetext);"/>
										<outline text="}" created="Sat, 16 Sep 2023 14:53:35 GMT"/>
										</outline>
									<outline text="});" created="Sat, 16 Sep 2023 14:37:56 GMT"/>
									</outline>
								<outline text="}" created="Wed, 10 Aug 2022 19:18:12 GMT"/>
								</outline>
							<outline text="if (theRequest.addToPagetable !== undefined) { //3/9/21 by DW" created="Tue, 09 Mar 2021 16:43:48 GMT">
								<outline text="for (var x in theRequest.addToPagetable) {" created="Tue, 09 Mar 2021 16:44:10 GMT">
									<outline text="pagetable [x] = theRequest.addToPagetable [x];" created="Tue, 09 Mar 2021 16:44:19 GMT"/>
									<outline text="}" created="Tue, 09 Mar 2021 16:44:14 GMT"/>
									</outline>
								<outline text="}" created="Tue, 09 Mar 2021 16:44:04 GMT"/>
								</outline>
							<outline text="if (config.addMacroToPagetable !== undefined) {">
								<outline text="config.addMacroToPagetable (pagetable, theRequest); //8/10/22 by DW"/>
								<outline text="}"/>
								</outline>
							<outline text="if (config.asyncAddMacroToPagetable !== undefined) { //8/10/22 by DW" created="Wed, 10 Aug 2022 19:16:30 GMT">
								<outline text="config.asyncAddMacroToPagetable (pagetable, theRequest, function () {">
									<outline text="buildAndServeHomepage ();"/>
									<outline text="});" created="Wed, 10 Aug 2022 19:17:36 GMT"/>
									</outline>
								<outline text="}" created="Wed, 10 Aug 2022 19:16:49 GMT"/>
								</outline>
							<outline text="else {" created="Wed, 10 Aug 2022 19:17:00 GMT">
								<outline text="buildAndServeHomepage ();"/>
								<outline text="}" created="Wed, 10 Aug 2022 19:17:02 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function returnServerHomePage () {" isComment="true">
							<outline text="Changes" isComment="true" created="Tue, 09 Mar 2021 16:44:49 GMT">
								<outline text="9/16/23; 10:29:24 AM by DW" created="Sat, 16 Sep 2023 14:29:23 GMT">
									<outline text="A new callback, xxx -- called when we start to build the server home page, allows it to do any mods to the default pagetable, before we do anything, including reading the template. This was needed when we added newsproduct rendering to the FeedLand server." created="Sat, 16 Sep 2023 14:29:25 GMT"/>
									</outline>
								<outline text="7/26/22; 11:31:05 AM by DW" created="Tue, 26 Jul 2022 15:31:05 GMT">
									<outline text="" created="Tue, 26 Jul 2022 15:31:05 GMT"/>
									</outline>
								<outline text="7/22/22; 10:20:05 AM by DW" created="Fri, 22 Jul 2022 14:20:04 GMT">
									<outline text="At first I added the whitelist to the pagetable, but changed the design, and added a call that determines whether a user is whitelisted. " created="Fri, 22 Jul 2022 14:20:06 GMT"/>
									</outline>
								<outline text="2/4/22; 3:57:54 PM by DW" created="Fri, 04 Feb 2022 20:57:53 GMT">
									<outline text="A new config value config.pathServerHomePageSource allows the home page text to be loaded from a local file." created="Fri, 04 Feb 2022 20:57:58 GMT"/>
									</outline>
								<outline text="3/9/21; 11:44:51 AM by DW" created="Tue, 09 Mar 2021 16:44:50 GMT">
									<outline text="The threadviewer app wants to handle URLs like this" created="Tue, 09 Mar 2021 16:44:52 GMT">
										<outline text="http://threadviewer/1369210173953372166" created="Tue, 09 Mar 2021 16:45:06 GMT"/>
										</outline>
									<outline text="The value of the id has to be transmitted to the JS code in the home page." created="Tue, 09 Mar 2021 16:45:25 GMT"/>
									<outline text="So the upper level changes the path to &quot;/&quot; and puts the id in theRequest.addToPagetable, and we handle it here. " created="Tue, 09 Mar 2021 16:45:48 GMT"/>
									</outline>
								</outline>
							<outline text="function servePage (templatetext) {" created="Fri, 04 Feb 2022 20:59:16 GMT">
								<outline text="function replaceAllAndReturnHtml () {" created="Wed, 10 Aug 2022 19:18:04 GMT">
									<outline text="var pagetext = utils.multipleReplaceAll (templatetext.toString (), pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"/>
									<outline text="returnHtml (pagetext);"/>
									<outline text="}" created="Wed, 10 Aug 2022 19:18:12 GMT"/>
									</outline>
								<outline text="var pagetable = {">
									<outline text="productName: config.productName, "/>
									<outline text="productNameForDisplay: config.productNameForDisplay, "/>
									<outline text="version: config.version,"/>
									<outline text="urlServerForClient: config.urlServerForClient,"/>
									<outline text="urlWebsocketServerForClient: config.urlWebsocketServerForClient,"/>
									<outline text="flEnableLogin: config.flEnableLogin,"/>
									<outline text="prefsPath: config.prefsPath,"/>
									<outline text="docsPath: config.docsPath,"/>
									<outline text="flUseTwitterIdentity: config.flUseTwitterIdentity, //2/6/23 by DW"/>
									<outline text="idGitHubClient: config.githubClientId, //11/9/21 by DW" created="Tue, 09 Nov 2021 16:06:48 GMT"/>
									<outline text="flWebsocketEnabled: config.flWebsocketEnabled //2/8/23 by DW" created="Wed, 08 Feb 2023 15:21:30 GMT"/>
									<outline text="};"/>
									</outline>
								<outline text="if (theRequest.addToPagetable !== undefined) { //3/9/21 by DW" created="Tue, 09 Mar 2021 16:43:48 GMT">
									<outline text="for (var x in theRequest.addToPagetable) {" created="Tue, 09 Mar 2021 16:44:10 GMT">
										<outline text="pagetable [x] = theRequest.addToPagetable [x];" created="Tue, 09 Mar 2021 16:44:19 GMT"/>
										<outline text="}" created="Tue, 09 Mar 2021 16:44:14 GMT"/>
										</outline>
									<outline text="}" created="Tue, 09 Mar 2021 16:44:04 GMT"/>
									</outline>
								<outline text="if (config.addMacroToPagetable !== undefined) {">
									<outline text="config.addMacroToPagetable (pagetable, theRequest); //8/10/22 by DW"/>
									<outline text="}"/>
									</outline>
								<outline text="if (config.asyncAddMacroToPagetable !== undefined) { //8/10/22 by DW" created="Wed, 10 Aug 2022 19:16:30 GMT">
									<outline text="config.asyncAddMacroToPagetable (pagetable, theRequest, function () {">
										<outline text="replaceAllAndReturnHtml ();"/>
										<outline text="});" created="Wed, 10 Aug 2022 19:17:36 GMT"/>
										</outline>
									<outline text="}" created="Wed, 10 Aug 2022 19:16:49 GMT"/>
									</outline>
								<outline text="else {" created="Wed, 10 Aug 2022 19:17:00 GMT">
									<outline text="replaceAllAndReturnHtml ();"/>
									<outline text="}" created="Wed, 10 Aug 2022 19:17:02 GMT"/>
									</outline>
								<outline text="}" created="Fri, 04 Feb 2022 21:02:43 GMT"/>
								</outline>
							<outline text="if (config.pathServerHomePageSource !== undefined) {" created="Fri, 04 Feb 2022 20:59:18 GMT">
								<outline text="fs.readFile (config.pathServerHomePageSource, function (err, templatetext) {" created="Fri, 04 Feb 2022 20:59:33 GMT">
									<outline text="if (err) {" created="Fri, 04 Feb 2022 21:00:01 GMT">
										<outline text="console.log (&quot;returnServerHomePage: err.message == &quot; + err.message + &quot;, f == &quot; + config.pathServerHomePageSource);" created="Fri, 04 Feb 2022 21:00:12 GMT"/>
										<outline text="}" created="Fri, 04 Feb 2022 21:00:05 GMT"/>
										</outline>
									<outline text="else {" created="Fri, 04 Feb 2022 21:00:06 GMT">
										<outline text="servePage (templatetext);" created="Fri, 04 Feb 2022 21:01:42 GMT"/>
										<outline text="}" created="Fri, 04 Feb 2022 21:00:07 GMT"/>
										</outline>
									<outline text="});" created="Fri, 04 Feb 2022 20:59:53 GMT"/>
									</outline>
								<outline text="}" created="Fri, 04 Feb 2022 20:59:29 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 04 Feb 2022 21:02:00 GMT">
								<outline text="request (config.urlServerHomePageSource, function (err, response, templatetext) {">
									<outline text="if (!err &amp;&amp; response.statusCode == 200) {">
										<outline text="servePage (templatetext);" created="Fri, 04 Feb 2022 21:01:42 GMT"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}" created="Fri, 04 Feb 2022 21:02:02 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function callWithScreenname (callback) {">
							<outline text="Changes" isComment="true" created="Fri, 23 Dec 2022 17:34:12 GMT">
								<outline text="3/8/23; 12:23:38 PM by DW" created="Wed, 08 Mar 2023 17:23:37 GMT">
									<outline text="email addresses are now unicase. " created="Wed, 08 Mar 2023 17:23:39 GMT"/>
									</outline>
								<outline text="2/12/23; 11:29:43 AM by DW" created="Sun, 12 Feb 2023 16:29:42 GMT">
									<outline text="Email authentication wasn't checking if the secret was correct. " created="Sun, 12 Feb 2023 16:29:43 GMT"/>
									</outline>
								<outline text="12/23/22; 12:34:15 PM by DW" created="Fri, 23 Dec 2022 17:34:14 GMT">
									<outline text="Allow the app to handle getting a screenname from params for us." created="Fri, 23 Dec 2022 17:34:15 GMT"/>
									</outline>
								</outline>
							<outline text="if (config.flUseTwitterIdentity) { //2/6/23 by DW" created="Mon, 06 Feb 2023 17:40:04 GMT">
								<outline text="if (config.getScreenname === undefined) {" created="Fri, 23 Dec 2022 17:32:45 GMT">
									<outline text="davetwitter.getScreenName (token, secret, function (screenname) {" created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784">
										<outline text="if (screenname === undefined) {" created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793">
											<outline text="returnError ({message: &quot;Can't do the thing you want because the accessToken is not valid.&quot;});    "/>
											<outline text="}" created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797"/>
											</outline>
										<outline text="else {" created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798">
											<outline text="callback (screenname);"/>
											<outline text="}" created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799"/>
											</outline>
										<outline text="});" created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785"/>
										</outline>
									<outline text="}" created="Fri, 23 Dec 2022 17:32:59 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 17:33:00 GMT">
									<outline text="config.getScreenname (params, function (err, screenname) { //12/23/22 by DW" created="Fri, 23 Dec 2022 17:26:36 GMT">
										<outline text="if (err) {" created="Fri, 23 Dec 2022 17:26:59 GMT">
											<outline text="returnError (err);" created="Fri, 23 Dec 2022 17:27:17 GMT"/>
											<outline text="}" created="Fri, 23 Dec 2022 17:27:01 GMT"/>
											</outline>
										<outline text="else {" created="Fri, 23 Dec 2022 17:27:02 GMT">
											<outline text="callback (screenname);" created="Fri, 23 Dec 2022 17:27:22 GMT"/>
											<outline text="}" created="Fri, 23 Dec 2022 17:27:04 GMT"/>
											</outline>
										<outline text="});" created="Fri, 23 Dec 2022 17:26:48 GMT"/>
										</outline>
									<outline text="}" created="Fri, 23 Dec 2022 17:33:02 GMT"/>
									</outline>
								<outline text="}" created="Mon, 06 Feb 2023 17:40:24 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 06 Feb 2023 17:40:25 GMT">
								<outline text="if ((params.emailaddress !== undefined) &amp;&amp; (params.emailcode !== undefined)) { " created="Tue, 13 Dec 2022 21:21:29 GMT">
									<outline text="const email = utils.stringLower (params.emailaddress); //3/8/23 by DW" created="Wed, 08 Mar 2023 17:19:30 GMT"/>
									<outline text="config.isUserInDatabase (email, function (flInDatabase, userRec) {" created="Mon, 06 Feb 2023 15:06:38 GMT">
										<outline text="if (flInDatabase) {" created="Mon, 06 Feb 2023 15:07:20 GMT">
											<outline text="if (params.emailcode == userRec.emailSecret) {" created="Sun, 12 Feb 2023 16:24:20 GMT">
												<outline text="callback (email);  " created="Mon, 06 Feb 2023 17:43:06 GMT"/>
												<outline text="}" created="Sun, 12 Feb 2023 16:24:26 GMT"/>
												</outline>
											<outline text="else {" created="Sun, 12 Feb 2023 16:24:27 GMT">
												<outline text="const message = &quot;Can't do what you wanted the correct email authentication wasn't provided.&quot;;" created="Mon, 06 Feb 2023 17:41:44 GMT"/>
												<outline text="returnError ({message});" created="Fri, 23 Dec 2022 17:27:17 GMT"/>
												<outline text="}" created="Sun, 12 Feb 2023 16:24:29 GMT"/>
												</outline>
											<outline text="}" created="Mon, 06 Feb 2023 15:07:23 GMT"/>
											</outline>
										<outline text="else {" created="Sun, 12 Feb 2023 16:28:30 GMT">
											<outline text="const message = &quot;Can't do what you wanted because the email address isn't in the database.&quot;;" created="Mon, 06 Feb 2023 17:41:44 GMT"/>
											<outline text="returnError ({message});" created="Fri, 23 Dec 2022 17:27:17 GMT"/>
											<outline text="}" created="Sun, 12 Feb 2023 16:28:31 GMT"/>
											</outline>
										<outline text="});" created="Mon, 06 Feb 2023 15:06:57 GMT"/>
										</outline>
									<outline text="}" created="Tue, 13 Dec 2022 21:21:55 GMT"/>
									</outline>
								<outline text="else {" created="Mon, 06 Feb 2023 17:41:38 GMT">
									<outline text="const message = &quot;Can't do what you wanted because the call is missing email authentication.&quot;;" created="Mon, 06 Feb 2023 17:41:44 GMT"/>
									<outline text="returnError ({message});" created="Fri, 23 Dec 2022 17:27:17 GMT"/>
									<outline text="}" created="Mon, 06 Feb 2023 17:41:39 GMT"/>
									</outline>
								<outline text="}" created="Mon, 06 Feb 2023 17:40:27 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function handleGithubOauthCallback (theCode) { //11/8/21 by DW" isComment="true">
							<outline text="Changes" isComment="true" created="Mon, 08 Nov 2021 17:18:01 GMT">
								<outline text="11/8/21; 12:18:03 PM by DW" created="Mon, 08 Nov 2021 17:18:02 GMT">
									<outline text="Cribbed from githubpub." created="Mon, 08 Nov 2021 17:18:03 GMT"/>
									</outline>
								</outline>
							<outline text="var params = {">
								<outline text="client_id: config.githubClientId,"/>
								<outline text="client_secret: config.githubClientSecret,"/>
								<outline text="code: theCode"/>
								<outline text="};"/>
								</outline>
							<outline text="var apiUrl = &quot;https://github.com/login/oauth/access_token?&quot; + utils.buildParamList (params);"/>
							<outline text="var githubRequest = {">
								<outline text="method: &quot;POST&quot;,"/>
								<outline text="url: apiUrl"/>
								<outline text="followRedirect: true, " isComment="true"/>
								<outline text="headers: {Accept: &quot;application/json&quot;}" isComment="true"/>
								<outline text="};"/>
								</outline>
							<outline text="console.log (&quot;handleGithubOauthCallback: githubRequest === &quot; + utils.jsonStringify (githubRequest));"/>
							<outline text="request (githubRequest, function (err, response, body) {">
								<outline text="if (err) {">
									<outline text="console.log (&quot;handleGithubOauthCallback: err.message == &quot; + err.message);"/>
									<outline text="returnError (err);" created="Mon, 08 Nov 2021 17:33:37 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="var postbody = qs.parse (body);"/>
									<outline text="var urlRedirect = &quot;/?githubaccesstoken=&quot; + postbody.access_token;"/>
									<outline text="console.log (&quot;handleGithubOauthCallback: urlRedirect = &quot; + urlRedirect);"/>
									<outline text="httpReturnRedirect (urlRedirect);" created="Mon, 08 Nov 2021 17:38:59 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (config.httpRequest !== undefined) {">
							<outline text="theRequest.httpReturnObject = httpReturnObject;" isComment="true"/>
							<outline text="theRequest.returnData = returnData;" isComment="true"/>
							<outline text="theRequest.returnPlainText = returnPlainText;" isComment="true"/>
							<outline text="if (config.httpRequest (theRequest)) { //consumed by callback">
								<outline text="return (true);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="" created="Sun, 10 Sep 2023 20:23:27 GMT"/>
						<outline text="if (wordpress.handleHttpRequest (theRequest)) { //9/10/23 by DW" created="Sun, 10 Sep 2023 20:23:28 GMT">
							<outline text="return (true);"/>
							<outline text="}" created="Sun, 10 Sep 2023 20:25:41 GMT"/>
							</outline>
						<outline text="" created="Sun, 10 Sep 2023 20:23:29 GMT"/>
						<outline text="switch (theRequest.lowermethod) {">
							<outline text="case &quot;post&quot;:">
								<outline text="switch (theRequest.lowerpath) {">
									<outline text="case &quot;/publishfile&quot;: //1/22/21 by DW" created="Thu, 26 Jun 2014 11:33:59 GMT" pgfnum="42464">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="var decodedText = decodeBase64Post (theRequest.postBody); //9/8/21 by DW" isComment="true" created="Wed, 08 Sep 2021 19:42:27 GMT"/>
											<outline text="publishFile (screenname, params.relpath, params.type, flprivate, theRequest.postBody.toString (), function (err, data) {">
												<outline text="if (err) {">
													<outline text="returnError (err);"/>
													<outline text="}"/>
													</outline>
												<outline text="else { //quirk in API, it wants a string, not a JSON struct">
													<outline text="if (!flprivate) {" created="Sat, 04 Dec 2021 19:04:13 GMT">
														<outline text="if (config.publicFileSaved !== undefined) {">
															<outline text="config.publicFileSaved (token, secret, getPublicFileUrl (screenname, params.relpath));"/>
															<outline text="}"/>
															</outline>
														<outline text="}" created="Sat, 04 Dec 2021 19:04:36 GMT"/>
														</outline>
													<outline text="returnPlainText (utils.jsonStringify (data));"/>
													<outline text="}"/>
													</outline>
												<outline text="});"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="return (true);"/>
										</outline>
									<outline text="case &quot;/writewholefile&quot;: //2/25/21 by DW -- special way to write a file, for scripting" created="Thu, 25 Feb 2021 17:42:29 GMT">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="writeWholeFile (screenname, params.relpath, theRequest.postBody.toString (), httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true);" created="Thu, 25 Feb 2021 17:42:43 GMT"/>
										</outline>
									<outline text="case &quot;/uploadtogithub&quot;:  //11/9/21 by DW">
										<outline text="uploadToGithub (params.options, theRequest.postBody, httpReturn);"/>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;get&quot;:">
								<outline text="switch (theRequest.lowerpath) {">
									<outline text="case &quot;/&quot;:">
										<outline text="returnServerHomePage ();"/>
										<outline text="return (true);"/>
										</outline>
									<outline text="case &quot;/now&quot;:">
										<outline text="returnPlainText (new Date ());"/>
										<outline text="return (true);"/>
										</outline>
									<outline text="case &quot;/version&quot;:">
										<outline text="returnData ({">
											<outline text="productName: config.productName,"/>
											<outline text="version: config.version"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true);"/>
										</outline>
									<outline text="case &quot;/stats&quot;:">
										<outline text="returnData (stats);"/>
										<outline text="return (true);"/>
										</outline>
									<outline text="case &quot;/getfile&quot;:">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="getFile (screenname, params.relpath, flprivate, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/getoptionalfile&quot;: ">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="getFile (screenname, params.relpath, flprivate, function (err, data) {">
												<outline text="if (err) {">
													<outline text="returnData ({}); //return nothing"/>
													<outline text="}"/>
													</outline>
												<outline text="else {">
													<outline text="returnData ({data});"/>
													<outline text="}"/>
													</outline>
												<outline text="});"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/getoptionalpublicorprivatefile&quot;: //4/4/21 by DW" isComment="true" created="Sun, 04 Apr 2021 17:17:35 GMT">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="getOptionalPublicOrPrivateFile (screenname, params.relpath, function (err, data) {">
												<outline text="if (err) {">
													<outline text="returnData ({}); //return nothing"/>
													<outline text="}"/>
													</outline>
												<outline text="else {">
													<outline text="returnData ({data});"/>
													<outline text="}"/>
													</outline>
												<outline text="});"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/getfilelist&quot;: ">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="getFileList (screenname, flprivate, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										<outline text="" isComment="true"/>
										<outline text="" isComment="true"/>
										<outline text="" isComment="true"/>
										<outline text="var accessToken = parsedUrl.query.oauth_token;" isComment="true" created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413"/>
										<outline text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;" isComment="true" created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413"/>
										<outline text="var flprivate = utils.getBoolean (parsedUrl.query.flprivate);" isComment="true" created="Mon, 04 Aug 2014 00:07:18 GMT" pgfnum="43127"/>
										<outline text="getScreenName (accessToken, accessTokenSecret, function (screenName) {" isComment="true" created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784">
											<outline text="if (screenName === undefined) {" created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793">
												<outline text="errorResponse ({message: &quot;Can't get the file list because the accessToken is not valid.&quot;});    "/>
												<outline text="}" created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797"/>
												</outline>
											<outline text="else {" created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798">
												<outline text="var s3path = getS3UsersPath (flprivate) + screenName + &quot;/&quot;;" created="Thu, 15 May 2014 15:40:17 GMT" pgfnum="41633"/>
												<outline text="console.log (&quot;/getfilelist: s3 path == &quot; + s3path); " isComment="true" created="Tue, 22 Jul 2014 13:24:40 GMT" pgfnum="43027"/>
												<outline text="getUserFileList (s3path, function (error, theList) {">
													<outline text="if (error) {">
														<outline text="errorResponse (error);    "/>
														<outline text="}"/>
														</outline>
													<outline text="else { ">
														<outline text="var returnedList = new Array (); //return a processed array -- 3/5/15 by DW"/>
														<outline text="for (var i = 0; i &lt; theList.length; i++) {">
															<outline text="var obj = new Object (), s3obj = theList [i];"/>
															<outline text="//set obj.path -- start copying into the object path when we pass the user's screen name">
																<outline text="var splitlist = s3obj.Key.split (&quot;/&quot;), flcopy = false, objectpath = &quot;&quot;;"/>
																<outline text="for (var j = 0; j &lt; splitlist.length; j++) {">
																	<outline text="if (flcopy) {">
																		<outline text="if (objectpath.length &gt; 0) {">
																			<outline text="objectpath += &quot;/&quot;;"/>
																			<outline text="}"/>
																			</outline>
																		<outline text="objectpath += splitlist [j];"/>
																		<outline text="}"/>
																		</outline>
																	<outline text="else {">
																		<outline text="if (splitlist [j] == screenName) {">
																			<outline text="flcopy = true;"/>
																			<outline text="}"/>
																			</outline>
																		<outline text="}"/>
																		</outline>
																	<outline text="}"/>
																	</outline>
																<outline text="obj.path = objectpath;"/>
																</outline>
															<outline text="obj.whenLastChange = s3obj.LastModified;"/>
															<outline text="obj.whenCreated = s3obj.whenCreated; //only present for filesystem objects --3/2/20 by DW"/>
															<outline text="obj.ctChars = s3obj.Size;"/>
															<outline text="returnedList [i] = obj;"/>
															<outline text="}"/>
															</outline>
														<outline text="dataResponse (returnedList);"/>
														<outline text="}"/>
														</outline>
													<outline text="});"/>
													</outline>
												<outline text="}" created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799"/>
												</outline>
											<outline text="});" created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785"/>
											</outline>
										<outline text="break; " isComment="true"/>
										</outline>
									<outline text="case &quot;/makefilepublic&quot;: //2/20/21 by DW">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="makeFilePublic (screenname, params.relpath, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/getfilehierarchy&quot;: //2/21/21 by DW">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="getFileHierarchy (screenname, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/deletefile&quot;: //2/23/21 by DW">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="deleteFile (screenname, params.relpath, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/readwholefile&quot;: //2/24/21 by DW">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="readWholeFile (screenname, params.relpath, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/fileexists&quot;: //5/29/21 by DW">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="fileExists (screenname, params.relpath, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/httpreadurl&quot;: //2/26/21 by DW" created="Fri, 26 Feb 2021 19:35:45 GMT">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="httpReadUrl (params.url, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/httprequest&quot;: //11/5/21 by DW" created="Fri, 26 Feb 2021 19:35:45 GMT">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="httpFullRequest (params.request, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/getdomainname&quot;: //2/27/21 by DW" created="Sat, 27 Feb 2021 16:51:06 GMT">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="getDomainNameVerb (params.dottedid, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/getdottedid&quot;: //2/27/21 by DW" created="Sat, 27 Feb 2021 16:51:06 GMT">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="getDottedIdVerb (params.name, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/myfiles&quot;: //3/7/21 by DW">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="getUserData (screenname, function (err, zipfile) {">
												<outline text="if (err) {">
													<outline text="errorResponse (err);"/>
													<outline text="}"/>
													</outline>
												<outline text="else {">
													<outline text="httpReturnZipFile (zipfile);"/>
													<outline text="}"/>
													</outline>
												<outline text="});"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/getfileinfo&quot;: //4/1/21 by DW">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="getFileInfo (screenname, params.relpath, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/githuboauthcallback&quot;: //11/8/21 by DW">
										<outline text="handleGithubOauthCallback (params.code, function (err, urlRedirect) {">
											<outline text="if (err) {" created="Mon, 08 Nov 2021 21:50:21 GMT">
												<outline text="returnError (err);" created="Mon, 08 Nov 2021 21:50:23 GMT"/>
												<outline text="}" created="Mon, 08 Nov 2021 21:50:27 GMT"/>
												</outline>
											<outline text="else {" created="Mon, 08 Nov 2021 21:50:28 GMT">
												<outline text="httpReturnRedirect (urlRedirect);" created="Mon, 08 Nov 2021 21:50:38 GMT"/>
												<outline text="}" created="Mon, 08 Nov 2021 21:50:30 GMT"/>
												</outline>
											<outline text="});" created="Mon, 08 Nov 2021 21:50:17 GMT"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/downloadfromgithub&quot;:  //11/8/21 by DW">
										<outline text="downloadFromGithub (params.username, params.repository, params.path, params.accessToken, httpReturn);"/>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/githubgetdirectory&quot;:  //11/10/21 by DW">
										<outline text="getGithubDirectory (params.username, params.repository, params.path, params.accessToken, httpReturn);"/>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/githubgetuserinfo&quot;:  //11/10/21 by DW">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="getGithubUserInfo (params.username, params.accessToken, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/useriswhitelisted&quot;: //7/21/22 by DW" created="Thu, 26 May 2022 17:09:29 GMT">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="userIsWhitelisted (screenname, httpReturn); //9/16/22 by DW" created="Fri, 16 Sep 2022 13:04:12 GMT"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/sendconfirmingemail&quot;: //12/7/22 by DW" created="Thu, 03 Nov 2022 19:29:32 GMT">
										<outline text="sendConfirmingEmail (params.email, undefined, false, params.urlredirect, httpReturn); //3/3/23 by DW" created="Fri, 04 Nov 2022 14:42:33 GMT"/>
										<outline text="return (true);"/>
										</outline>
									<outline text="case &quot;/createnewuser&quot;: //1/7/23 by DW" created="Thu, 03 Nov 2022 19:29:32 GMT">
										<outline text="sendConfirmingEmail (params.email, params.name, true, params.urlredirect, httpReturn); //3/3/23 by DW" created="Fri, 04 Nov 2022 14:42:33 GMT"/>
										<outline text="return (true);"/>
										</outline>
									<outline text="case &quot;/userconfirms&quot;: //12/7/22 by DW" created="Thu, 03 Nov 2022 19:29:32 GMT">
										<outline text="receiveConfirmation (params.emailConfirmCode, httpReturnRedirect);" created="Fri, 04 Nov 2022 15:16:38 GMT"/>
										<outline text="return (true);"/>
										</outline>
									<outline text="" created="Wed, 10 Nov 2021 14:12:13 GMT"/>
									<outline text="case &quot;/debug&quot;: " isComment="true">
										<outline text="notifySocketSubscribers (&quot;reload&quot;)"/>
										<outline text="returnPlainText (&quot;hello&quot;);"/>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (false);"/>
						<outline text="}"/>
						</outline>
					<outline text="function http404Callback (theRequest) {">
						<outline text="Changes" isComment="true" created="Tue, 03 Aug 2021 21:17:26 GMT">
							<outline text="9/8/21; 9:42:53 AM by DW" created="Wed, 08 Sep 2021 13:42:53 GMT">
								<outline text="Changed call to getfile to call to local routine getFileContent. " created="Wed, 08 Sep 2021 13:42:54 GMT"/>
								<outline text="getfile is converting the contents of the file to a string, which works fine for HTML and JSON files, but screws up binary files like images." created="Wed, 08 Sep 2021 13:43:24 GMT"/>
								<outline text="At some point we'll need to trace through all the calls to getfile and make them able to deal with the buffer, but for right now I wanted to solve the problem for serving image files from the user's public space. " created="Wed, 08 Sep 2021 13:43:56 GMT"/>
								</outline>
							<outline text="8/3/21; 5:17:29 PM by DW" created="Tue, 03 Aug 2021 21:17:27 GMT">
								<outline text="We were returning the content type of plain text for everything. We can do much better. " created="Tue, 03 Aug 2021 21:17:29 GMT"/>
								<outline text="" created="Tue, 03 Aug 2021 21:18:02 GMT"/>
								</outline>
							</outline>
						<outline text="console.log (&quot;http404Callback: theRequest.path == &quot; + theRequest.path);" isComment="true"/>
						<outline text="if (config.flStorageEnabled) {">
							<outline text="if (checkPathForIllegalChars (theRequest.path)) {">
								<outline text="function return404 () {">
									<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="function returnPlainText (s) {">
									<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, s.toString ());"/>
									<outline text="}"/>
									</outline>
								<outline text="" created="Wed, 08 Sep 2021 13:38:32 GMT"/>
								<outline text="function getFileContent (screenname, relpath, flprivate, callback) { //9/8/21 by DW" created="Wed, 08 Sep 2021 13:38:32 GMT">
									<outline text="var f = getFilePath (screenname, relpath, flprivate);"/>
									<outline text="fs.readFile (f, function (err, filetext) {">
										<outline text="if (err) {">
											<outline text="callback (err);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="callback (undefined, filetext);" created="Wed, 08 Sep 2021 13:40:29 GMT"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}" created="Wed, 08 Sep 2021 13:39:11 GMT"/>
									</outline>
								<outline text="" created="Wed, 08 Sep 2021 13:38:33 GMT"/>
								<outline text="var path = utils.stringDelete (theRequest.path, 1, 1); //delete leading slash"/>
								<outline text="var screenname = utils.stringNthField (path, &quot;/&quot;, 1);"/>
								<outline text="var relpath = utils.stringDelete (path, 1, screenname.length + 1);"/>
								<outline text="var flprivate = false;"/>
								<outline text="getFileContent (screenname, relpath, flprivate, function (err, filedata) {">
									<outline text="if (err) {">
										<outline text="return404 ();"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="const ext = utils.stringLastField (relpath, &quot;.&quot;); //8/3/21 by DW"/>
										<outline text="if (ext == relpath) { //no extension" created="Tue, 03 Aug 2021 21:25:28 GMT">
											<outline text="type = config.defaultContentType;" created="Tue, 03 Aug 2021 21:25:40 GMT"/>
											<outline text="}" created="Tue, 03 Aug 2021 21:25:50 GMT"/>
											</outline>
										<outline text="else {" created="Tue, 03 Aug 2021 21:26:47 GMT">
											<outline text="type = utils.httpExt2MIME (ext, config.defaultContentType);" created="Tue, 03 Aug 2021 21:26:57 GMT"/>
											<outline text="}" created="Tue, 03 Aug 2021 21:26:49 GMT"/>
											</outline>
										<outline text="theRequest.httpReturn (200, type, filedata);"/>
										<outline text="returnPlainText (data.filedata);" isComment="true"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="return404 ();"/>
								<outline text="}"/>
								</outline>
							<outline text="return (true); //tell davetwitter we handled it"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="return (false); //tell davetwitter we didn't handle it"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function userLogonCallback (options) { //8/14/22 by DW" created="Sun, 14 Aug 2022 21:56:47 GMT">
						<outline text="if (config.userLogonCallback !== undefined) {" created="Sun, 14 Aug 2022 22:11:57 GMT">
							<outline text="config.userLogonCallback (options);" created="Sun, 14 Aug 2022 22:12:08 GMT"/>
							<outline text="}" created="Sun, 14 Aug 2022 22:12:04 GMT"/>
							</outline>
						<outline text="}" created="Sun, 14 Aug 2022 21:56:52 GMT"/>
						</outline>
					<outline text="function everyMinute () {">
						<outline text="Changes" isComment="true" created="Tue, 15 Aug 2023 15:48:52 GMT">
							<outline text="8/15/23; 11:49:03 AM by DW" created="Tue, 15 Aug 2023 15:48:54 GMT">
								<outline text="Check confirmations every hour, not every minute." created="Tue, 15 Aug 2023 15:49:03 GMT"/>
								</outline>
							</outline>
						<outline text="var now = new Date ();"/>
						<outline text="if (config.everyMinute !== undefined) {">
							<outline text="config.everyMinute ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if (now.getMinutes () == 0) {">
							<outline text="console.log (&quot;\n&quot; + now.toLocaleTimeString () + &quot;: &quot; + config.productName + &quot; v&quot; + config.version + &quot; running on port &quot; + config.port + &quot;.\n&quot;);"/>
							<outline text="checkPendingConfirmations (); //12/7/22 by DW"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function everySecond () {">
						<outline text="if (flStatsChanged) {">
							<outline text="stats.ctWrites++;"/>
							<outline text="flStatsChanged = false;"/>
							<outline text="fs.writeFile (fnameStats, utils.jsonStringify (stats), function () {">
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if (config.everySecond !== undefined) {">
							<outline text="config.everySecond ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="utils.copyScalars (options, config); //1/22/21 by DW"/>
					<outline text="readConfigJson (function () { //readConfig (fnameConfig, config, true, function () { //anything can be overridden by config.json">
						<outline text="readConfig (fnameStats, stats, false, function () {">
							<outline text="if (process.env.PORT !== undefined) { //8/6/20 by DW">
								<outline text="config.port = process.env.PORT;"/>
								<outline text="}"/>
								</outline>
							<outline text="stats.ctStarts++;"/>
							<outline text="stats.ctHitsThisRun = 0;"/>
							<outline text="stats.whenLastStart = whenStart;"/>
							<outline text="statsChanged ();"/>
							<outline text="console.log (&quot;\n&quot; + config.productName + &quot; v&quot; + config.version + &quot; running on port &quot; + config.port + &quot;.\n&quot;);"/>
							<outline text="console.log (&quot;config == &quot; + utils.jsonStringify (config)); "/>
							<outline text="startDavetwitter (handleHttpRequest);"/>
							<outline text="startDavemail (); //1/23/23 by DW" created="Mon, 23 Jan 2023 20:36:33 GMT"/>
							<outline text="" created="Sun, 10 Sep 2023 20:37:05 GMT"/>
							<outline text="if (config.wordpress !== undefined) { //9/10/23 by DW" created="Sun, 10 Sep 2023 20:37:05 GMT">
								<outline text="wordpress.start (config.wordpress, function () {" created="Sun, 10 Sep 2023 20:37:37 GMT">
									<outline text="});" created="Sun, 10 Sep 2023 20:44:17 GMT"/>
									</outline>
								<outline text="}" created="Sun, 10 Sep 2023 20:37:14 GMT"/>
								</outline>
							<outline text="" created="Sun, 10 Sep 2023 20:37:05 GMT"/>
							<outline text="if (config.myDomain === undefined) {">
								<outline text="console.log (&quot;startup: can't start the server because config.myDomain is not defined.&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (config.urlServerForClient === undefined) { //1/30/23 by DW" created="Mon, 30 Jan 2023 17:37:18 GMT">
									<outline text="config.urlServerForClient = &quot;http://&quot; + config.myDomain + &quot;/&quot;;"/>
									<outline text="}" created="Mon, 30 Jan 2023 17:37:25 GMT"/>
									</outline>
								<outline text="if (config.urlWebsocketServerForClient === undefined) { //1/30/23 by DW" created="Mon, 30 Jan 2023 17:37:18 GMT">
									<outline text="config.urlWebsocketServerForClient = getWsProtocol () + utils.stringNthField (config.myDomain, &quot;:&quot;, 1) + &quot;:&quot; + config.websocketPort + &quot;/&quot;;"/>
									<outline text="}" created="Mon, 30 Jan 2023 17:37:41 GMT"/>
									</outline>
								<outline text="webSocketStartup (); "/>
								<outline text="setInterval (everySecond, 1000); "/>
								<outline text="utils.runEveryMinute (everyMinute); "/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback (config);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="example/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;testdaveappserver&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Bare bones demo app for daveappserver package.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davefilesystem&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveappserver&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="example/app.js">
				<outline text="const daveappserver = require (&quot;../appserver.js&quot;);"/>
				<outline text="const daveappserver = require (&quot;daveappserver&quot;); " isComment="true"/>
				<outline text="const utils = require (&quot;daveutils&quot;); "/>
				<outline text=""/>
				<outline text="var stats = {">
					<outline text="ctslogans: 0,"/>
					<outline text="whenLastSlogan: undefined"/>
					<outline text="};"/>
					</outline>
				<outline text="var options = {">
					<outline text="everySecond: function () {">
						<outline text="},"/>
						</outline>
					<outline text="everyMinute: function () {">
						<outline text="},"/>
						</outline>
					<outline text="httpRequest: function (theRequest) {">
						<outline text="var now = new Date ();"/>
						<outline text="function returnPlainText (s) {">
							<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, s.toString ());"/>
							<outline text="}"/>
							</outline>
						<outline text="function returnData (jstruct) {">
							<outline text="if (jstruct === undefined) {">
								<outline text="jstruct = {};"/>
								<outline text="}"/>
								</outline>
							<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
							<outline text="}"/>
							</outline>
						<outline text="switch (theRequest.lowerpath) {">
							<outline text="case &quot;/slogan&quot;:">
								<outline text="stats.ctslogans++;"/>
								<outline text="stats.whenLastSlogan = now;"/>
								<outline text="daveappserver.saveStats (stats);"/>
								<outline text="returnData ({slogan: utils.getRandomSnarkySlogan ()});"/>
								<outline text="return (true);"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (false); //not consumed"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="daveappserver.start (options);"/>
				</outline>
			<outline text="example/index.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;[%productNameForDisplay%]&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text=""/>
						<outline text="&lt;!-- Facebook metadata --&gt;" isComment="true">
							<outline text="&lt;meta property=&quot;og:url&quot; content=&quot;[%metaUrl%]&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:type&quot; content=&quot;website&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:title&quot; content=&quot;[%metaTitle%]&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:description&quot; content=&quot;[%metaDescription%]&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:image&quot; content=&quot;[%metaImgUrl%]&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:site_name&quot; content=&quot;[%metaSiteName%]&quot; /&gt;"/>
							</outline>
						<outline text="&lt;!-- Twitter metadata --&gt;" isComment="true">
							<outline text="&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:site&quot; content=&quot;@[%metaTwitterScreenName%]&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:title&quot; content=&quot;[%metaTitle%]&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:url&quot; content=&quot;[%metaUrl%]&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:description&quot; content=&quot;[%metaDescription%]&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:image:src&quot; content=&quot;[%metaImgUrl%]&quot;&gt;"/>
							</outline>
						<outline text=""/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/storage/api.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text=""/>
						<outline text="&lt;style&gt;">
							<outline text="body {">
								<outline text="font-family: Ubuntu;"/>
								<outline text="font-size: 20px;"/>
								<outline text="background-color: whitesmoke;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="margin-top: 200px;"/>
								<outline text="width: 50%;"/>
								<outline text="margin-left: auto;"/>
								<outline text="margin-right: auto;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divVersionNumber {">
								<outline text="font-size: 12px;"/>
								<outline text="color: &lt;%uiTextColor%&gt;;" isComment="true"/>
								<outline text="float: right;"/>
								<outline text="padding: 19px;"/>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/style&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="var appConsts = {">
								<outline text="productname: &quot;[%productName%]&quot;,"/>
								<outline text="productnameForDisplay: &quot;[%productNameForDisplay%]&quot;,"/>
								<outline text="version: &quot;[%version%]&quot;,"/>
								<outline text="urlTwitterServer: &quot;[%urlServerForClient%]&quot;,"/>
								<outline text="urlSocketServer: &quot;[%urlWebsocketServerForClient%]&quot;,"/>
								<outline text="flEnableLogin: [%flEnableLogin%],"/>
								<outline text="flUseSockets: true"/>
								<outline text="urlServer: &quot;http://localhost:1420/&quot;" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="var appPrefs = {">
								<outline text="ctStartups: 0,"/>
								<outline text="whenLastStartup: undefined,"/>
								<outline text="lastPublishedText: &quot;&quot;"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="var myNodeStorageApp = undefined;"/>
							<outline text=""/>
							<outline text="function prefsChanged () {">
								<outline text="myNodeStorageApp.prefsChanged ();"/>
								<outline text="}"/>
								</outline>
							<outline text="function httpRequest (url, timeout, headers, callback) {">
								<outline text="Changes" isComment="true">
									<outline text="7/20/20; 5:36:14 PM by DW">
										<outline text="Finally, I need a HTTP request routine that calls back in a standard way.">
											<outline text="function (err, data)"/>
											</outline>
										<outline text="No, I don't want to use promises."/>
										<outline text="for info about timeous see this page." isComment="true">
											<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"/>
											</outline>
										</outline>
									</outline>
								<outline text="timeout = (timeout === undefined) ? 30000 : timeout;"/>
								<outline text="var jxhr = $.ajax ({ ">
									<outline text="url: url,"/>
									<outline text="dataType: &quot;text&quot;, "/>
									<outline text="headers," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
									<outline text="timeout"/>
									<outline text="}) "/>
									</outline>
								<outline text=".success (function (data, status) { ">
									<outline text="callback (undefined, data);"/>
									<outline text="}) "/>
									</outline>
								<outline text=".error (function (status) { ">
									<outline text="var err = {">
										<outline text="code: status.status,"/>
										<outline text="message: JSON.parse (status.responseText).message"/>
										<outline text="};"/>
										</outline>
									<outline text="callback (err);"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function servercall (path, params, flAuthenticated, callback) {">
								<outline text="Changes" isComment="true">
									<outline text="1/11/21; 12:51:47 PM by DW">
										<outline text="New param, flAuthenticated. If true we add the oAuth info to the call. "/>
										</outline>
									</outline>
								<outline text="if (params === undefined) {">
									<outline text="params = new Object ();"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="if (flAuthenticated) { //1/11/21 by DW">
									<outline text="params.oauth_token = localStorage.twOauthToken;"/>
									<outline text="params.oauth_token_secret = localStorage.twOauthTokenSecret;"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="var url = appConsts.urlServer + path + &quot;?&quot; + twBuildParamList (params, false);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
								<outline text="console.log (&quot;servercall: url == &quot; + url); //1/18/21 by DW"/>
								<outline text="httpRequest (url, undefined, undefined, function (err, jsontext) {">
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="callback (undefined, JSON.parse (jsontext));"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function getSlogan (callback) {">
								<outline text="servercall (&quot;slogan&quot;, undefined, false, callback);"/>
								<outline text="}"/>
								</outline>
							<outline text="function viewSlogan () {">
								<outline text="getSlogan (function (err, jstruct) {">
									<outline text="if (err) {">
										<outline text="alertDialog (err.message);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="alertDialog (jstruct.slogan);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function uploadFile (path, filetext, type, flprivate, callback) {">
								<outline text="twUploadFile (path, filetext, type, flprivate, function (data) {">
									<outline text="console.log (&quot;uploadFile: data == &quot; + jsonStringify (data));"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback (data);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function testUploadFile () {">
								<outline text="askDialog (&quot;Text you would like to publish:&quot;, appPrefs.lastPublishedText, &quot;Some text you'd like to publish.&quot;, function (theText, flcancel) {" created="Tue, 08 Jan 2013 01:26:19 GMT" pgfnum="16860">
									<outline text="if (!flcancel) {">
										<outline text="appPrefs.lastPublishedText = theText;"/>
										<outline text="prefsChanged ();"/>
										<outline text="uploadFile (&quot;testfile.txt&quot;, theText, &quot;text/plain&quot;, false, function (data) {">
											<outline text="window.open (data.url);"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="function updateTwitterLogin () {">
								<outline text="if (appConsts.flEnableLogin) {">
									<outline text="initTwitterMenuItems ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function everySecond () {">
								<outline text="updateTwitterLogin ()"/>
								<outline text="}"/>
								</outline>
							<outline text="function startup () {">
								<outline text="console.log (&quot;startup&quot;);"/>
								<outline text="myNodeStorageApp = new nodeStorageApp (appConsts, appPrefs);"/>
								<outline text="myNodeStorageApp.everySecond = everySecond;"/>
								<outline text="myNodeStorageApp.start (function (flConnected) {">
									<outline text="if (flConnected) {">
										<outline text="appPrefs.ctStartups++;"/>
										<outline text="appPrefs.whenLastStartup = new Date ();"/>
										<outline text="prefsChanged ();"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="updateTwitterLogin ();"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divMenubar&quot; id=&quot;idMenubar&quot;&gt;" created="Thu, 28 Mar 2013 21:39:05 GMT" pgfnum="21615">
							<outline text="&lt;div class=&quot;topbar-wrapper&quot; style=&quot;z-index: 5;&quot;&gt;">
								<outline text="&lt;div class=&quot;navbar navbar-fixed-top&quot; data-dropdown=&quot;dropdown&quot;&gt;">
									<outline text="&lt;div class=&quot;divVersionNumber&quot; id=&quot;idVersionNumber&quot;&gt;">
										<outline text="[%version%]"/>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;div class=&quot;navbar-inner&quot;&gt;">
										<outline text="&lt;div class=&quot;container&quot;&gt;">
											<outline text="&lt;a class=&quot;brand&quot; onclick=&quot;clickHome ()&quot;&gt;&lt;span id=&quot;idMenuProductName&quot;&gt;[%productNameForDisplay%]&lt;/span&gt;&lt;/a&gt;"/>
											<outline text="&lt;ul class=&quot;nav&quot; id=&quot;idMainMenuList&quot;&gt;">
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idMainMenu&quot;&gt; ">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Menu&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;viewSlogan ()&quot;&gt;Slogan...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;testUploadFile ()&quot;&gt;Publish...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;alertDialog ('One')&quot;&gt;One...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;alertDialog ('Two')&quot;&gt;Two...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;alertDialog ('Three')&quot;&gt;Three...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;/ul&gt;"/>
												</outline>
											<outline text="&lt;ul class=&quot;nav pull-right&quot;&gt;">
												<outline text="&lt;li class=&quot;dropdown&quot;&gt;">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;&lt;span id=&quot;idTwitterIcon&quot;&gt;&lt;/span&gt;&lt;span id=&quot;idTwitterUsername&quot;&gt;&lt;/span&gt;&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;aboutDialog ();&quot;&gt;About &lt;span id=&quot;idMenuAboutProductName&quot;&gt;&lt;/span&gt;...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;" isComment="true"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;showPrefsDialog ();&quot;&gt;Settings...&lt;/a&gt;&lt;/li&gt;" isComment="true"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;fbToggleConnectCommand ();&quot; id=&quot;idFacebookConnectMenuItem&quot;&gt;&lt;/a&gt;&lt;/li&gt;" isComment="true"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;twToggleConnectCommand ();&quot; id=&quot;idTwitterConnectMenuItem&quot;&gt;&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;/ul&gt;"/>
												</outline>
											<outline text="&lt;/div&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;" created="Thu, 28 Mar 2013 21:39:17 GMT" pgfnum="21616"/>
							</outline>
						<outline text=""/>
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;center&gt;">
								<outline text="&lt;p&gt;This is the home page for an example app for &lt;a href=&quot;https://github.com/scripting/appServer&quot;&gt;daveAppServer&lt;/a&gt;.&lt;/p&gt;"/>
								<outline text="&lt;/center&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text=""/>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text=""/>
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="example/config.json" isComment="true">
				<outline text="{">
					<outline text="&quot;productName&quot;: &quot;testDaveAppserver&quot;,"/>
					<outline text="&quot;productNameForDisplay&quot;: &quot;Example App&quot;,"/>
					<outline text=""/>
					<outline text="&quot;urlServerHomePageSource&quot;: &quot;http://scripting.com/code/daveappserver/example/index.html&quot;,"/>
					<outline text=""/>
					<outline text="&quot;prefsPath&quot;: &quot;prefs.json&quot;,"/>
					<outline text="&quot;docsPath&quot;: &quot;myDocs/&quot;,"/>
					<outline text=""/>
					<outline text="&quot;port&quot;: 1420,"/>
					<outline text="&quot;flWebsocketEnabled&quot;: true,"/>
					<outline text="&quot;websocketPort&quot;: 1421,"/>
					<outline text=""/>
					<outline text="&quot;myDomain&quot;: &quot;localhost:1420&quot;,"/>
					<outline text=""/>
					<outline text="&quot;twitterConsumerKey&quot;: &quot;abcdefghijklmnopqrstufwxy&quot;,"/>
					<outline text="&quot;twitterConsumerSecret&quot;: &quot;abcdefghijklmnopqrstufwxyabcdefghijklmnopqrstufwxy&quot;"/>
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildDaveAppServer ()"/>
			</outline>
		</body>
	</opml>
